declare const _default: import("nuxt/app").Plugin<{
    toast: ((message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number) & {
        success: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        info: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        warning: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        error: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        custom: (component: import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        message: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        promise: <ToastData>(promise: Promise<ToastData> | (() => Promise<ToastData>), data?: ({
            id?: number | string | undefined;
            toasterId?: string | undefined;
            icon?: import("vue").Component | undefined;
            component?: import("vue").Component | undefined;
            componentProps?: any;
            richColors?: boolean | undefined;
            invert?: boolean | undefined;
            closeButton?: boolean | undefined;
            dismissible?: boolean | undefined;
            duration?: number | undefined;
            important?: boolean | undefined;
            action?: (import("vue-sonner").Action | import("vue").Component) | undefined;
            cancel?: (import("vue-sonner").Action | import("vue").Component) | undefined;
            onDismiss?: ((toast: import("vue-sonner").ToastT) => void) | undefined;
            onAutoClose?: ((toast: import("vue-sonner").ToastT) => void) | undefined;
            cancelButtonStyle?: import("vue").CSSProperties | undefined;
            actionButtonStyle?: import("vue").CSSProperties | undefined;
            style?: import("vue").CSSProperties | undefined;
            unstyled?: boolean | undefined;
            class?: string | undefined;
            classes?: import("vue-sonner").ToastClasses | undefined;
            descriptionClass?: string | undefined;
            position?: ("top-left" | "top-right" | "bottom-left" | "bottom-right" | "top-center" | "bottom-center") | undefined;
            closeButtonPosition?: ("top-left" | "top-right" | "bottom-left" | "bottom-right") | undefined;
            testId?: string | undefined;
        } & {
            loading?: string | import("vue").Component;
            success?: (string | import("vue").Component | ((data: ToastData) => import("vue").Component | string | Promise<import("vue").Component | string>)) | (import("vue-sonner").PromiseIExtendedResult | ((data: ToastData) => import("vue-sonner").PromiseIExtendedResult | Promise<import("vue-sonner").PromiseIExtendedResult>)) | undefined;
            error?: (string | import("vue").Component | ((data: any) => import("vue").Component | string | Promise<import("vue").Component | string>)) | (import("vue-sonner").PromiseIExtendedResult | ((data: any) => import("vue-sonner").PromiseIExtendedResult | Promise<import("vue-sonner").PromiseIExtendedResult>));
            description?: string | import("vue").Component | ((data: any) => import("vue").Component | string | Promise<import("vue").Component | string>);
            finally?: () => void | Promise<void>;
        }) | undefined) => (string & {
            unwrap: () => Promise<ToastData>;
        }) | (number & {
            unwrap: () => Promise<ToastData>;
        }) | {
            unwrap: () => Promise<ToastData>;
        } | undefined;
        dismiss: (id?: number | string) => string | number | undefined;
        loading: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
    } & {
        getHistory: () => (import("vue-sonner").ToastT<import("vue").Component> | import("vue-sonner").ToastToDismiss)[];
        getToasts: () => (import("vue-sonner").ToastT<import("vue").Component> | import("vue-sonner").ToastToDismiss)[];
    };
}> & import("nuxt/app").ObjectPlugin<{
    toast: ((message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number) & {
        success: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        info: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        warning: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        error: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        custom: (component: import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        message: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
        promise: <ToastData>(promise: Promise<ToastData> | (() => Promise<ToastData>), data?: ({
            id?: number | string | undefined;
            toasterId?: string | undefined;
            icon?: import("vue").Component | undefined;
            component?: import("vue").Component | undefined;
            componentProps?: any;
            richColors?: boolean | undefined;
            invert?: boolean | undefined;
            closeButton?: boolean | undefined;
            dismissible?: boolean | undefined;
            duration?: number | undefined;
            important?: boolean | undefined;
            action?: (import("vue-sonner").Action | import("vue").Component) | undefined;
            cancel?: (import("vue-sonner").Action | import("vue").Component) | undefined;
            onDismiss?: ((toast: import("vue-sonner").ToastT) => void) | undefined;
            onAutoClose?: ((toast: import("vue-sonner").ToastT) => void) | undefined;
            cancelButtonStyle?: import("vue").CSSProperties | undefined;
            actionButtonStyle?: import("vue").CSSProperties | undefined;
            style?: import("vue").CSSProperties | undefined;
            unstyled?: boolean | undefined;
            class?: string | undefined;
            classes?: import("vue-sonner").ToastClasses | undefined;
            descriptionClass?: string | undefined;
            position?: ("top-left" | "top-right" | "bottom-left" | "bottom-right" | "top-center" | "bottom-center") | undefined;
            closeButtonPosition?: ("top-left" | "top-right" | "bottom-left" | "bottom-right") | undefined;
            testId?: string | undefined;
        } & {
            loading?: string | import("vue").Component;
            success?: (string | import("vue").Component | ((data: ToastData) => import("vue").Component | string | Promise<import("vue").Component | string>)) | (import("vue-sonner").PromiseIExtendedResult | ((data: ToastData) => import("vue-sonner").PromiseIExtendedResult | Promise<import("vue-sonner").PromiseIExtendedResult>)) | undefined;
            error?: (string | import("vue").Component | ((data: any) => import("vue").Component | string | Promise<import("vue").Component | string>)) | (import("vue-sonner").PromiseIExtendedResult | ((data: any) => import("vue-sonner").PromiseIExtendedResult | Promise<import("vue-sonner").PromiseIExtendedResult>));
            description?: string | import("vue").Component | ((data: any) => import("vue").Component | string | Promise<import("vue").Component | string>);
            finally?: () => void | Promise<void>;
        }) | undefined) => (string & {
            unwrap: () => Promise<ToastData>;
        }) | (number & {
            unwrap: () => Promise<ToastData>;
        }) | {
            unwrap: () => Promise<ToastData>;
        } | undefined;
        dismiss: (id?: number | string) => string | number | undefined;
        loading: (message: string | (() => string | import("vue").Component) | import("vue").Component, data?: import("vue-sonner").ExternalToast) => string | number;
    } & {
        getHistory: () => (import("vue-sonner").ToastT<import("vue").Component> | import("vue-sonner").ToastToDismiss)[];
        getToasts: () => (import("vue-sonner").ToastT<import("vue").Component> | import("vue-sonner").ToastToDismiss)[];
    };
}>;
export default _default;
