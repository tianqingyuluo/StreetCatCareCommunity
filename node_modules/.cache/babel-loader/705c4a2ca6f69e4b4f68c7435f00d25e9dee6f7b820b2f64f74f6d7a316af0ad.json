{"ast":null,"code":"import { defineComponent, useSlots, computed, inject, openBlock, createElementBlock, normalizeClass, unref, withDirectives, createElementVNode, mergeProps, isRef, withModifiers, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { checkboxGroupContextKey } from './constants.mjs';\nimport { checkboxProps, checkboxEmits } from './checkbox2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useCheckbox } from './composables/use-checkbox.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCheckboxButton\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup(__props) {\n    const props = __props;\n    const slots = useSlots();\n    const {\n      isFocused,\n      isChecked,\n      isDisabled,\n      checkboxButtonSize,\n      model,\n      actualValue,\n      handleChange\n    } = useCheckbox(props, slots);\n    const inputBindings = computed(() => {\n      var _a, _b, _c, _d;\n      if (props.trueValue || props.falseValue || props.trueLabel || props.falseLabel) {\n        return {\n          \"true-value\": (_b = (_a = props.trueValue) != null ? _a : props.trueLabel) != null ? _b : true,\n          \"false-value\": (_d = (_c = props.falseValue) != null ? _c : props.falseLabel) != null ? _d : false\n        };\n      }\n      return {\n        value: actualValue.value\n      };\n    });\n    const checkboxGroup = inject(checkboxGroupContextKey, void 0);\n    const ns = useNamespace(\"checkbox\");\n    const activeStyle = computed(() => {\n      var _a, _b, _c, _d;\n      const fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0\n      };\n    });\n    const labelKls = computed(() => {\n      return [ns.b(\"button\"), ns.bm(\"button\", checkboxButtonSize.value), ns.is(\"disabled\", isDisabled.value), ns.is(\"checked\", isChecked.value), ns.is(\"focus\", isFocused.value)];\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"label\", {\n        class: normalizeClass(unref(labelKls))\n      }, [withDirectives(createElementVNode(\"input\", mergeProps({\n        \"onUpdate:modelValue\": $event => isRef(model) ? model.value = $event : null,\n        class: unref(ns).be(\"button\", \"original\"),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled)\n      }, unref(inputBindings), {\n        onChange: unref(handleChange),\n        onFocus: $event => isFocused.value = true,\n        onBlur: $event => isFocused.value = false,\n        onClick: withModifiers(() => {}, [\"stop\"])\n      }), null, 16, [\"onUpdate:modelValue\", \"name\", \"tabindex\", \"disabled\", \"onChange\", \"onFocus\", \"onBlur\", \"onClick\"]), [[vModelCheckbox, unref(model)]]), _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        class: normalizeClass(unref(ns).be(\"button\", \"inner\")),\n        style: normalizeStyle(unref(isChecked) ? unref(activeStyle) : void 0)\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 6)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar CheckboxButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"checkbox-button.vue\"]]);\nexport { CheckboxButton as default };","map":{"version":3,"names":["name","slots","useSlots","isFocused","isChecked","isDisabled","checkboxButtonSize","model","actualValue","handleChange","useCheckbox","props","inputBindings","computed","_a","_b","_c","_d","trueValue","falseValue","trueLabel","falseLabel","value","checkboxGroup","inject","checkboxGroupContextKey","ns","useNamespace","activeStyle","fillValue","fill","backgroundColor","borderColor","color","textColor","boxShadow","labelKls","b","bm","is"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-button.vue"],"sourcesContent":["<template>\n  <label :class=\"labelKls\">\n    <input\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      v-bind=\"inputBindings\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  actualValue,\n  handleChange,\n} = useCheckbox(props, slots)\n\nconst inputBindings = computed(() => {\n  if (\n    props.trueValue ||\n    props.falseValue ||\n    props.trueLabel ||\n    props.falseLabel\n  ) {\n    return {\n      'true-value': props.trueValue ?? props.trueLabel ?? true,\n      'false-value': props.falseValue ?? props.falseLabel ?? false,\n    }\n  }\n  return {\n    value: actualValue.value,\n  }\n})\n\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n"],"mappings":";;;;;;mCAmCc;EACZA,IAAM;AACR;;;;;;;IAIA,MAAMC,KAAA,GAAQC,QAAS;IAEjB;MACJC,SAAA;MACAC,SAAA;MACAC,UAAA;MACAC,kBAAA;MACAC,KAAA;MACAC,WAAA;MACAC;IAAA,CACF,GAAIC,WAAY,CAAAC,KAAA,EAAOV,KAAK;IAEtB,MAAAW,aAAA,GAAgBC,QAAA,CAAS,MAAM;MACnC,IACEC,EAAA,EAAAC,EAAM,EACNC,EAAA,EAAAC,EAAA;MAIO,IAAAN,KAAA,CAAAO,SAAA,IAAAP,KAAA,CAAAQ,UAAA,IAAAR,KAAA,CAAAS,SAAA,IAAAT,KAAA,CAAAU,UAAA;QAAA,OACS;UACd,YAAe,GAAAN,EAAA,IAAMD,EAAc,GAAAH,KAAA,CAAAO,SAAM,KAAc,OAAAJ,EAAA,GAAAH,KAAA,CAAAS,SAAA,YAAAL,EAAA;UACzD,gBAAAE,EAAA,IAAAD,EAAA,GAAAL,KAAA,CAAAQ,UAAA,YAAAH,EAAA,GAAAL,KAAA,CAAAU,UAAA,YAAAJ,EAAA;QAAA,CACF;MACA;MAAO;QAEPK,KAAA,EAAAd,WAAA,CAAAc;MAAA,CACD;IAED,CAAM;IACA,MAAAC,aAAA,GAAAC,MAA4B,CAAAC,uBAAA;IAE5B,MAAAC,EAAA,GAAAC,YAAA,WAA4C;IAC1C,MAAAC,WAAA,GAAYf,QAAe;MAC1B,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA;MAAA,MACYY,SAAA,IAAAd,EAAA,IAAAD,EAAA,GAAAS,aAAA,oBAAAA,aAAA,CAAAO,IAAA,qBAAAhB,EAAA,CAAAQ,KAAA,YAAAP,EAAA;MAAA,OACJ;QACbgB,eAAsB,EAAAF,SAAA;QACtBG,WAAW,EAAAH,SAAA;QACbI,KAAA,GAAAhB,EAAA,IAAAD,EAAA,GAAAO,aAAA,oBAAAA,aAAA,CAAAW,SAAA,qBAAAlB,EAAA,CAAAM,KAAA,YAAAL,EAAA;QACDkB,SAAA,EAAAN,SAAA,iBAAAA,SAAA;MAED,CAAM;IACJ,CAAO;IACL,MAAAO,QAAa,GAAAvB,QAAA;MAAA,OACV,CACHa,EAAG,CAAAW,CAAA,SAAe,GAClBX,EAAG,CAAAY,EAAA,CAAG,QAAW,EAAAhC,kBAAe,CAAAgB,KAAA,GAChCI,EAAG,CAAAa,EAAA,CAAG,UAAS,EAAAlC,UAAe,CAAAiB,KAAA,GAChCI,EAAA,CAAAa,EAAA,YAAAnC,SAAA,CAAAkB,KAAA,GACDI,EAAA,CAAAa,EAAA,UAAApC,SAAA,CAAAmB,KAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}