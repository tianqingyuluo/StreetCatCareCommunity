{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { inject, computed, h } from 'vue';\nimport { merge } from 'lodash-unified';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nimport TdWrapper from './td-wrapper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { isBoolean, isPropAbsent } from '../../../../utils/types.mjs';\nfunction useRender(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const ns = useNamespace(\"table\");\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger\n  } = useEvents(props);\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth\n  } = useStyles(props);\n  let displayIndex = -1;\n  const firstDefaultColumnIndex = computed(() => {\n    var _a;\n    return (_a = props.store) == null ? void 0 : _a.states.columns.value.findIndex(({\n      type\n    }) => type === \"default\");\n  });\n  const getKeyOfRow = (row, index) => {\n    var _a;\n    const rowKey = (_a = parent == null ? void 0 : parent.props) == null ? void 0 : _a.rowKey;\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n    return index;\n  };\n  const rowRender = (row, $index, treeRowData, expanded = false) => {\n    const {\n      tooltipEffect,\n      tooltipOptions,\n      store\n    } = props;\n    const {\n      indent,\n      columns\n    } = store.states;\n    const rowClasses = [];\n    let display = true;\n    if (treeRowData) {\n      rowClasses.push(ns.em(\"row\", `level-${treeRowData.level}`));\n      display = !!treeRowData.display;\n    }\n    if ($index === 0) {\n      displayIndex = -1;\n    }\n    if (props.stripe && display) {\n      displayIndex++;\n    }\n    rowClasses.push(...getRowClass(row, $index, displayIndex));\n    const displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      class: rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: $event => handleDoubleClick($event, row),\n      onClick: $event => handleClick($event, row),\n      onContextmenu: $event => handleContextMenu($event, row),\n      onMouseenter: () => handleMouseEnter($index),\n      onMouseleave: handleMouseLeave\n    }, columns.value.map((column, cellIndex) => {\n      const {\n        rowspan,\n        colspan\n      } = getSpan(row, column, $index, cellIndex);\n      if (!rowspan || !colspan) {\n        return null;\n      }\n      const columnData = Object.assign({}, column);\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      const data = {\n        store,\n        _self: props.context || parent,\n        column: columnData,\n        row,\n        $index,\n        cellIndex,\n        expanded\n      };\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level && treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n        if (isBoolean(treeRowData.expanded)) {\n          data.treeNode.expanded = treeRowData.expanded;\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n      const baseKey = `${getKeyOfRow(row, $index)},${cellIndex}`;\n      const patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      const mergedTooltipOptions = column.showOverflowTooltip && merge({\n        effect: tooltipEffect\n      }, tooltipOptions, column.showOverflowTooltip);\n      return h(TdWrapper, {\n        style: getCellStyle($index, cellIndex, row, column),\n        class: getCellClass($index, cellIndex, row, column, colspan - 1),\n        key: `${patchKey}${baseKey}`,\n        rowspan,\n        colspan,\n        onMouseenter: $event => handleCellMouseEnter($event, row, mergedTooltipOptions),\n        onMouseleave: handleCellMouseLeave\n      }, {\n        default: () => cellChildren(cellIndex, column, data)\n      });\n    }));\n  };\n  const cellChildren = (_cellIndex, column, data) => {\n    return column.renderCell(data);\n  };\n  const wrappedRowRender = (row, $index) => {\n    const store = props.store;\n    const {\n      isRowExpanded,\n      assertRowKey\n    } = store;\n    const {\n      treeData,\n      lazyTreeNodeMap,\n      childrenColumnName,\n      rowKey\n    } = store.states;\n    const columns = store.states.columns.value;\n    const hasExpandColumn = columns.some(({\n      type\n    }) => type === \"expand\");\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row);\n      const tr = rowRender(row, $index, void 0, expanded);\n      const renderExpanded = parent == null ? void 0 : parent.renderExpanded;\n      if (!renderExpanded) {\n        console.error(\"[Element Error]renderExpanded is required.\");\n        return tr;\n      }\n      const rows = [[tr]];\n      if (parent.props.preserveExpandedContent || expanded) {\n        rows[0].push(h(\"tr\", {\n          key: `expanded-row__${tr.key}`,\n          style: {\n            display: expanded ? \"\" : \"none\"\n          }\n        }, [h(\"td\", {\n          colspan: columns.length,\n          class: `${ns.e(\"cell\")} ${ns.e(\"expanded-cell\")}`\n        }, [renderExpanded({\n          row,\n          $index,\n          store,\n          expanded\n        })])]));\n      }\n      return rows;\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      const key = getRowIdentity(row, rowKey.value);\n      let cur = treeData.value[key];\n      let treeRowData = null;\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n          noLazyChildren: void 0,\n          loading: void 0\n        };\n        if (isBoolean(cur.lazy)) {\n          if (treeRowData && isBoolean(cur.loaded) && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n          treeRowData.loading = cur.loading;\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData != null ? treeRowData : void 0)];\n      if (cur) {\n        let i = 0;\n        const traverse = (children, parent2) => {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(node => {\n            const innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            const childKey = getRowIdentity(node, rowKey.value);\n            if (isPropAbsent(childKey)) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n            cur = {\n              ...treeData.value[childKey]\n            };\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n              if (isBoolean(cur.lazy)) {\n                if (isBoolean(cur.loaded) && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n            if (cur) {\n              const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n        cur.display = true;\n        const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger\n  };\n}\nexport { useRender as default };","map":{"version":3,"names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useEvents","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","useStyles","displayIndex","firstDefaultColumnIndex","computed","_a","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","expanded","tooltipEffect","tooltipOptions","indent","rowClasses","display","push","em","level","stripe","displayStyle","h","style","class","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","Object","assign","realWidth","data","_self","context","treeNode","isBoolean","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","mergedTooltipOptions","showOverflowTooltip","merge","effect","TdWrapper","default","cellChildren","_cellIndex","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","tr","renderExpanded","console","error","rows","preserveExpandedContent","length","e","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","isPropAbsent","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["import { computed, h, inject } from 'vue'\nimport { merge } from 'lodash-unified'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isBoolean, isPropAbsent } from '@element-plus/utils'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport TdWrapper from './td-wrapper.vue'\n\nimport type { TableBodyProps } from './defaults'\nimport type {\n  DefaultRow,\n  RenderRowData,\n  Table,\n  TableColumnCtx,\n  TableProps,\n  TreeNode,\n} from '../table/defaults'\nimport type { TreeData } from '../store/tree'\nimport type { TableOverflowTooltipOptions } from '../util'\n\nfunction useRender<T extends DefaultRow>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY) as Table<T>\n  const ns = useNamespace('table')\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n\n  let displayIndex = -1\n\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store?.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent?.props as Partial<TableProps<T>>)?.rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (\n    row: T,\n    $index: number,\n    treeRowData?: TreeNode,\n    expanded = false\n  ) => {\n    const { tooltipEffect, tooltipOptions, store } = props\n    const { indent, columns } = store!.states\n    const rowClasses = []\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(ns.em('row', `level-${treeRowData.level}`))\n      display = !!treeRowData.display\n    }\n    if ($index === 0) {\n      displayIndex = -1\n    }\n    if (props.stripe && display) {\n      displayIndex++\n    }\n    rowClasses.push(...getRowClass(row, $index, displayIndex))\n    const displayStyle = display ? null : { display: 'none' }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event: Event) => handleDoubleClick($event, row),\n        onClick: ($event: Event) => handleClick($event, row),\n        onContextmenu: ($event: Event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = Object.assign({}, column)\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: store!,\n          _self: props.context || parent!,\n          column: columnData,\n          row,\n          $index,\n          cellIndex,\n          expanded,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level && treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (isBoolean(treeRowData.expanded)) {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${getKeyOfRow(row, $index)},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const mergedTooltipOptions =\n          column.showOverflowTooltip &&\n          merge(\n            {\n              effect: tooltipEffect,\n            },\n            tooltipOptions,\n            column.showOverflowTooltip\n          )\n        return h(\n          TdWrapper,\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column, colspan - 1),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event: MouseEvent) =>\n              handleCellMouseEnter(\n                $event,\n                row,\n                mergedTooltipOptions as TableOverflowTooltipOptions\n              ),\n            onMouseleave: handleCellMouseLeave,\n          },\n          {\n            default: () => cellChildren(cellIndex, column, data),\n          }\n        )\n      })\n    )\n  }\n  const cellChildren = <T extends DefaultRow>(\n    _cellIndex: number,\n    column: TableColumnCtx<T>,\n    data: RenderRowData<T>\n  ) => {\n    return column.renderCell(data)\n  }\n\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store!\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const columns = store.states.columns.value\n    const hasExpandColumn = columns.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row)\n      const tr = rowRender(row, $index, undefined, expanded)\n      const renderExpanded = parent?.renderExpanded\n      if (!renderExpanded) {\n        console.error('[Element Error]renderExpanded is required.')\n        return tr\n      }\n\n      // 在没设置时候避免 h 执行\n      // 非保留模式且未展开时，直接返回\n      // 使用二维数组包装，避免修改 $index\n      const rows = [[tr]]\n\n      // 仅在需要时创建展开行（保留模式或展开状态）\n      if (parent.props.preserveExpandedContent || expanded) {\n        rows[0].push(\n          h(\n            'tr',\n            {\n              key: `expanded-row__${tr.key as string}`,\n              style: { display: expanded ? '' : 'none' },\n            },\n            [\n              h(\n                'td',\n                {\n                  colspan: columns.length,\n                  class: `${ns.e('cell')} ${ns.e('expanded-cell')}`,\n                },\n                [renderExpanded({ row, $index, store, expanded })]\n              ),\n            ]\n          )\n        )\n      }\n\n      return rows\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n          noLazyChildren: undefined as boolean | undefined,\n          loading: undefined as boolean | undefined,\n        }\n        if (isBoolean(cur.lazy)) {\n          if (treeRowData && isBoolean(cur.loaded) && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData ?? undefined)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children: T[], parent: TreeData) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData: Partial<Record<string, any>> = {\n              display: parent.display && parent.expanded,\n              level: parent.level! + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (isPropAbsent(childKey)) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (isBoolean(cur.lazy)) {\n                if (isBoolean(cur.loaded) && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}