{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, openBlock, createElementBlock, normalizeClass, unref, withModifiers, withDirectives, withKeys, renderSlot, createVNode, withCtx, createBlock, createCommentVNode, createSlots } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowDown, Minus, ArrowUp, Plus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { vRepeatClick } from '../../../directives/repeat-click/index.mjs';\nimport { getEventCode, getEventKey } from '../../../utils/dom/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { isNumber, isUndefined } from '../../../utils/types.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { throwError, debugWarn } from '../../../utils/error.mjs';\nimport { isString } from '@vue/shared';\nconst __default__ = defineComponent({\n  name: \"ElInputNumber\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"input-number\");\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const minDisabled = computed(() => isNumber(props.modelValue) && props.modelValue <= props.min);\n    const maxDisabled = computed(() => isNumber(props.modelValue) && props.modelValue >= props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) ;\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useFormSize();\n    const inputNumberDisabled = useFormDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n      let currentValue = data.currentValue;\n      if (isNil(currentValue)) return \"\";\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n      return currentValue;\n    });\n    const toPrecision = (num, pre) => {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      if (pre === 0) return Math.round(num);\n      let snum = String(num);\n      const pointPos = snum.indexOf(\".\");\n      if (pointPos === -1) return num;\n      const nums = snum.replace(\".\", \"\").split(\"\");\n      const datum = nums[pointPos + pre];\n      if (!datum) return num;\n      const length = snum.length;\n      if (snum.charAt(length - 1) === \"5\") {\n        snum = `${snum.slice(0, Math.max(0, length - 1))}6`;\n      }\n      return Number.parseFloat(Number(snum).toFixed(pre));\n    };\n    const getPrecision = value => {\n      if (isNil(value)) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    };\n    const ensurePrecision = (val, coefficient = 1) => {\n      if (!isNumber(val)) return data.currentValue;\n      if (val >= Number.MAX_SAFE_INTEGER && coefficient === 1) {\n        return val;\n      } else if (val <= Number.MIN_SAFE_INTEGER && coefficient === -1) {\n        return val;\n      }\n      return toPrecision(val + props.step * coefficient);\n    };\n    const handleKeydown = event => {\n      const code = getEventCode(event);\n      const key = getEventKey(event);\n      if (props.disabledScientific && [\"e\", \"E\"].includes(key)) {\n        event.preventDefault();\n        return;\n      }\n      switch (code) {\n        case EVENT_CODE.up:\n          {\n            event.preventDefault();\n            increase();\n            break;\n          }\n        case EVENT_CODE.down:\n          {\n            event.preventDefault();\n            decrease();\n            break;\n          }\n      }\n    };\n    const increase = () => {\n      if (props.readonly || inputNumberDisabled.value || maxDisabled.value) return;\n      const value = Number(displayValue.value) || 0;\n      const newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n      emit(INPUT_EVENT, data.currentValue);\n      setCurrentValueToModelValue();\n    };\n    const decrease = () => {\n      if (props.readonly || inputNumberDisabled.value || minDisabled.value) return;\n      const value = Number(displayValue.value) || 0;\n      const newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n      emit(INPUT_EVENT, data.currentValue);\n      setCurrentValueToModelValue();\n    };\n    const verifyValue = (value, update) => {\n      const {\n        max,\n        min,\n        step,\n        precision,\n        stepStrictly,\n        valueOnClear\n      } = props;\n      if (max < min) {\n        throwError(\"InputNumber\", \"min should not be greater than max.\");\n      }\n      let newVal = Number(value);\n      if (isNil(value) || Number.isNaN(newVal)) {\n        return null;\n      }\n      if (value === \"\") {\n        if (valueOnClear === null) {\n          return null;\n        }\n        newVal = isString(valueOnClear) ? {\n          min,\n          max\n        }[valueOnClear] : valueOnClear;\n      }\n      if (stepStrictly) {\n        newVal = toPrecision(Math.round(newVal / step) * step, precision);\n        if (newVal !== value) {\n          update && emit(UPDATE_MODEL_EVENT, newVal);\n        }\n      }\n      if (!isUndefined(precision)) {\n        newVal = toPrecision(newVal, precision);\n      }\n      if (newVal > max || newVal < min) {\n        newVal = newVal > max ? max : min;\n        update && emit(UPDATE_MODEL_EVENT, newVal);\n      }\n      return newVal;\n    };\n    const setCurrentValue = (value, emitChange = true) => {\n      var _a;\n      const oldVal = data.currentValue;\n      const newVal = verifyValue(value);\n      if (!emitChange) {\n        emit(UPDATE_MODEL_EVENT, newVal);\n        return;\n      }\n      if (oldVal === newVal && value) return;\n      data.userInput = null;\n      emit(UPDATE_MODEL_EVENT, newVal);\n      if (oldVal !== newVal) {\n        emit(CHANGE_EVENT, newVal, oldVal);\n      }\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn());\n      }\n      data.currentValue = newVal;\n    };\n    const handleInput = value => {\n      data.userInput = value;\n      const newVal = value === \"\" ? null : Number(value);\n      emit(INPUT_EVENT, newVal);\n      setCurrentValue(newVal, false);\n    };\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n      setCurrentValueToModelValue();\n      data.userInput = null;\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a, _b;\n      data.userInput = null;\n      if (data.currentValue === null && ((_a = input.value) == null ? void 0 : _a.input)) {\n        input.value.input.value = \"\";\n      }\n      emit(\"blur\", event);\n      if (props.validateEvent) {\n        (_b = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _b.call(formItem, \"blur\").catch(err => debugWarn());\n      }\n    };\n    const setCurrentValueToModelValue = () => {\n      if (data.currentValue !== props.modelValue) {\n        data.currentValue = props.modelValue;\n      }\n    };\n    const handleWheel = e => {\n      if (document.activeElement === e.target) e.preventDefault();\n    };\n    watch(() => props.modelValue, (value, oldValue) => {\n      const newValue = verifyValue(value, true);\n      if (data.userInput === null && newValue !== oldValue) {\n        data.currentValue = newValue;\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.precision, () => {\n      data.currentValue = verifyValue(props.modelValue);\n    });\n    onMounted(() => {\n      var _a;\n      const {\n        min,\n        max,\n        modelValue\n      } = props;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      if (Number.isFinite(max)) {\n        innerInput.setAttribute(\"aria-valuemax\", String(max));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemax\");\n      }\n      if (Number.isFinite(min)) {\n        innerInput.setAttribute(\"aria-valuemin\", String(min));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemin\");\n      }\n      innerInput.setAttribute(\"aria-valuenow\", data.currentValue || data.currentValue === 0 ? String(data.currentValue) : \"\");\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n      if (!isNumber(modelValue) && modelValue != null) {\n        let val = Number(modelValue);\n        if (Number.isNaN(val)) {\n          val = null;\n        }\n        emit(UPDATE_MODEL_EVENT, val);\n      }\n      innerInput.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    });\n    onUpdated(() => {\n      var _a, _b;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", `${(_b = data.currentValue) != null ? _b : \"\"}`);\n    });\n    expose({\n      focus,\n      blur\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(unref(inputNumberSize)), unref(ns).is(\"disabled\", unref(inputNumberDisabled)), unref(ns).is(\"without-controls\", !_ctx.controls), unref(ns).is(\"controls-right\", unref(controlsAtRight)), unref(ns).is(_ctx.align, !!_ctx.align)]),\n        onDragstart: withModifiers(() => {}, [\"prevent\"])\n      }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.decrease\"),\n        class: normalizeClass([unref(ns).e(\"decrease\"), unref(ns).is(\"disabled\", unref(minDisabled))]),\n        onKeydown: withKeys(decrease, [\"enter\"])\n      }, [renderSlot(_ctx.$slots, \"decrease-icon\", {}, () => [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowDown), {\n          key: 0\n        })) : (openBlock(), createBlock(unref(Minus), {\n          key: 1\n        }))]),\n        _: 1\n      })])], 42, [\"aria-label\", \"onKeydown\"])), [[unref(vRepeatClick), decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.increase\"),\n        class: normalizeClass([unref(ns).e(\"increase\"), unref(ns).is(\"disabled\", unref(maxDisabled))]),\n        onKeydown: withKeys(increase, [\"enter\"])\n      }, [renderSlot(_ctx.$slots, \"increase-icon\", {}, () => [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowUp), {\n          key: 0\n        })) : (openBlock(), createBlock(unref(Plus), {\n          key: 1\n        }))]),\n        _: 1\n      })])], 42, [\"aria-label\", \"onKeydown\"])), [[unref(vRepeatClick), increase]]) : createCommentVNode(\"v-if\", true), createVNode(unref(ElInput), {\n        id: _ctx.id,\n        ref_key: \"input\",\n        ref: input,\n        type: \"number\",\n        step: _ctx.step,\n        \"model-value\": unref(displayValue),\n        placeholder: _ctx.placeholder,\n        readonly: _ctx.readonly,\n        disabled: unref(inputNumberDisabled),\n        size: unref(inputNumberSize),\n        max: _ctx.max,\n        min: _ctx.min,\n        name: _ctx.name,\n        \"aria-label\": _ctx.ariaLabel,\n        \"validate-event\": false,\n        inputmode: _ctx.inputmode,\n        onKeyup: handleKeydown,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onInput: handleInput,\n        onChange: handleInputChange\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.prefix ? {\n        name: \"prefix\",\n        fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n      } : void 0, _ctx.$slots.suffix ? {\n        name: \"suffix\",\n        fn: withCtx(() => [renderSlot(_ctx.$slots, \"suffix\")])\n      } : void 0]), 1032, [\"id\", \"step\", \"model-value\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"aria-label\", \"inputmode\"])], 42, [\"onDragstart\"]);\n    };\n  }\n});\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"input-number.vue\"]]);\nexport { InputNumber as default };","map":{"version":3,"names":["name","t","useLocale","ns","useNamespace","input","ref","data","reactive","currentValue","props","modelValue","userInput","formItem","useFormItem","minDisabled","computed","isNumber","min","maxDisabled","max","numPrecision","stepPrecision","getPrecision","step","isUndefined","precision","Math","controlsAtRight","controls","controlsPosition","inputNumberSize","useFormSize","inputNumberDisabled","useFormDisabled","displayValue","isNil","Number","isNaN","toFixed","toPrecision","num","pre","value","round","snum","String","pointPos","indexOf","nums","replace","split","datum","length","charAt","slice","parseFloat","valueString","toString","dotPosition","ensurePrecision","val","coefficient","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","handleKeydown","event","code","getEventCode","key","getEventKey","disabledScientific","includes","preventDefault","EVENT_CODE","up","increase","down","decrease","readonly","newVal","setCurrentValue","emit","INPUT_EVENT","setCurrentValueToModelValue","verifyValue","update","stepStrictly","valueOnClear","throwError","isString","UPDATE_MODEL_EVENT","emitChange","_a","oldVal","CHANGE_EVENT","validateEvent","validate","call","catch","err","debugWarn","handleInput","handleInputChange","focus","_b","blur","handleFocus","handleBlur","handleWheel","e","document","activeElement","target","watch","oldValue","newValue","immediate","onMounted","innerInput","setAttribute","isFinite","removeAttribute","addEventListener","passive","onUpdated","expose","_ctx","_cache","openBlock","createElementBlock","class","normalizeClass","unref","b","m","is"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n      ns.is(align, !!align),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.decrease')\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <slot name=\"decrease-icon\">\n        <el-icon>\n          <arrow-down v-if=\"controlsAtRight\" />\n          <minus v-else />\n        </el-icon>\n      </slot>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.increase')\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <slot name=\"increase-icon\">\n        <el-icon>\n          <arrow-up v-if=\"controlsAtRight\" />\n          <plus v-else />\n        </el-icon>\n      </slot>\n    </span>\n    <el-input\n      :id=\"id\"\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :aria-label=\"ariaLabel\"\n      :validate-event=\"false\"\n      :inputmode=\"inputmode\"\n      @keyup=\"handleKeydown\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    >\n      <template v-if=\"$slots.prefix\" #prefix>\n        <slot name=\"prefix\" />\n      </template>\n      <template v-if=\"$slots.suffix\" #suffix>\n        <slot name=\"suffix\" />\n      </template>\n    </el-input>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, onUpdated, reactive, ref, watch } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { ElInput } from '@element-plus/components/input'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { vRepeatClick } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport {\n  debugWarn,\n  getEventCode,\n  getEventKey,\n  isNumber,\n  isString,\n  isUndefined,\n  throwError,\n} from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\n\nimport type { InputInstance } from '@element-plus/components/input'\n\ndefineOptions({\n  name: 'ElInputNumber',\n})\n\nconst props = defineProps(inputNumberProps)\nconst emit = defineEmits(inputNumberEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('input-number')\nconst input = ref<InputInstance>()\n\ninterface Data {\n  currentValue: number | null | undefined\n  userInput: null | number | string\n}\nconst data = reactive<Data>({\n  currentValue: props.modelValue,\n  userInput: null,\n})\n\nconst { formItem } = useFormItem()\n\nconst minDisabled = computed(\n  () => isNumber(props.modelValue) && props.modelValue <= props.min\n)\nconst maxDisabled = computed(\n  () => isNumber(props.modelValue) && props.modelValue >= props.max\n)\n\nconst numPrecision = computed(() => {\n  const stepPrecision = getPrecision(props.step)\n  if (!isUndefined(props.precision)) {\n    if (stepPrecision > props.precision) {\n      debugWarn(\n        'InputNumber',\n        'precision should not be less than the decimal places of step'\n      )\n    }\n    return props.precision\n  } else {\n    return Math.max(getPrecision(props.modelValue), stepPrecision)\n  }\n})\nconst controlsAtRight = computed(() => {\n  return props.controls && props.controlsPosition === 'right'\n})\n\nconst inputNumberSize = useFormSize()\nconst inputNumberDisabled = useFormDisabled()\n\nconst displayValue = computed(() => {\n  if (data.userInput !== null) {\n    return data.userInput\n  }\n  let currentValue: number | string | undefined | null = data.currentValue\n  if (isNil(currentValue)) return ''\n  if (isNumber(currentValue)) {\n    if (Number.isNaN(currentValue)) return ''\n    if (!isUndefined(props.precision)) {\n      currentValue = currentValue.toFixed(props.precision)\n    }\n  }\n  return currentValue\n})\nconst toPrecision = (num: number, pre?: number) => {\n  if (isUndefined(pre)) pre = numPrecision.value\n  if (pre === 0) return Math.round(num)\n  let snum = String(num)\n  const pointPos = snum.indexOf('.')\n  if (pointPos === -1) return num\n  const nums = snum.replace('.', '').split('')\n  const datum = nums[pointPos + pre]\n  if (!datum) return num\n  const length = snum.length\n  if (snum.charAt(length - 1) === '5') {\n    snum = `${snum.slice(0, Math.max(0, length - 1))}6`\n  }\n  return Number.parseFloat(Number(snum).toFixed(pre))\n}\nconst getPrecision = (value: number | null | undefined) => {\n  if (isNil(value)) return 0\n  const valueString = value.toString()\n  const dotPosition = valueString.indexOf('.')\n  let precision = 0\n  if (dotPosition !== -1) {\n    precision = valueString.length - dotPosition - 1\n  }\n  return precision\n}\nconst ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n  if (!isNumber(val)) return data.currentValue\n  if (val >= Number.MAX_SAFE_INTEGER && coefficient === 1) {\n    debugWarn(\n      'InputNumber',\n      'The value has reached the maximum safe integer limit.'\n    )\n    return val\n  } else if (val <= Number.MIN_SAFE_INTEGER && coefficient === -1) {\n    debugWarn(\n      'InputNumber',\n      'The value has reached the minimum safe integer limit.'\n    )\n    return val\n  }\n\n  // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n  return toPrecision(val + props.step * coefficient)\n}\nconst handleKeydown = (event: KeyboardEvent | Event) => {\n  const code = getEventCode(event as KeyboardEvent)\n  const key = getEventKey(event as KeyboardEvent)\n\n  if (props.disabledScientific && ['e', 'E'].includes(key)) {\n    event.preventDefault()\n    return\n  }\n\n  switch (code) {\n    case EVENT_CODE.up: {\n      event.preventDefault()\n      increase()\n      break\n    }\n    case EVENT_CODE.down: {\n      event.preventDefault()\n      decrease()\n      break\n    }\n  }\n}\nconst increase = () => {\n  if (props.readonly || inputNumberDisabled.value || maxDisabled.value) return\n  const value = Number(displayValue.value) || 0\n  const newVal = ensurePrecision(value)\n  setCurrentValue(newVal)\n  emit(INPUT_EVENT, data.currentValue)\n  setCurrentValueToModelValue()\n}\nconst decrease = () => {\n  if (props.readonly || inputNumberDisabled.value || minDisabled.value) return\n  const value = Number(displayValue.value) || 0\n  const newVal = ensurePrecision(value, -1)\n  setCurrentValue(newVal)\n  emit(INPUT_EVENT, data.currentValue)\n  setCurrentValueToModelValue()\n}\nconst verifyValue = (\n  value: number | string | null | undefined,\n  update?: boolean\n): number | null | undefined => {\n  const { max, min, step, precision, stepStrictly, valueOnClear } = props\n  if (max < min) {\n    throwError('InputNumber', 'min should not be greater than max.')\n  }\n  let newVal = Number(value)\n  if (isNil(value) || Number.isNaN(newVal)) {\n    return null\n  }\n  if (value === '') {\n    if (valueOnClear === null) {\n      return null\n    }\n    newVal = isString(valueOnClear) ? { min, max }[valueOnClear] : valueOnClear\n  }\n  if (stepStrictly) {\n    newVal = toPrecision(Math.round(newVal / step) * step, precision)\n    if (newVal !== value) {\n      update && emit(UPDATE_MODEL_EVENT, newVal)\n    }\n  }\n  if (!isUndefined(precision)) {\n    newVal = toPrecision(newVal, precision)\n  }\n  if (newVal > max || newVal < min) {\n    newVal = newVal > max ? max : min\n    update && emit(UPDATE_MODEL_EVENT, newVal)\n  }\n  return newVal\n}\nconst setCurrentValue = (\n  value: number | string | null | undefined,\n  emitChange = true\n) => {\n  const oldVal = data.currentValue\n  const newVal = verifyValue(value)\n  if (!emitChange) {\n    emit(UPDATE_MODEL_EVENT, newVal!)\n    return\n  }\n  if (oldVal === newVal && value) return\n  data.userInput = null\n  emit(UPDATE_MODEL_EVENT, newVal!)\n  if (oldVal !== newVal) {\n    emit(CHANGE_EVENT, newVal!, oldVal!)\n  }\n  if (props.validateEvent) {\n    formItem?.validate?.('change').catch((err) => debugWarn(err))\n  }\n  data.currentValue = newVal\n}\nconst handleInput = (value: string) => {\n  data.userInput = value\n  const newVal = value === '' ? null : Number(value)\n  emit(INPUT_EVENT, newVal)\n  setCurrentValue(newVal, false)\n}\nconst handleInputChange = (value: string) => {\n  const newVal = value !== '' ? Number(value) : ''\n  if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n    setCurrentValue(newVal)\n  }\n  setCurrentValueToModelValue()\n  data.userInput = null\n}\n\nconst focus = () => {\n  input.value?.focus?.()\n}\n\nconst blur = () => {\n  input.value?.blur?.()\n}\n\nconst handleFocus = (event: MouseEvent | FocusEvent) => {\n  emit('focus', event)\n}\n\nconst handleBlur = (event: MouseEvent | FocusEvent) => {\n  data.userInput = null\n  // When non-numeric content is entered into a numeric input box,\n  // the content displayed on the page is not cleared after the value is cleared. #18533\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1398528\n  if (data.currentValue === null && input.value?.input) {\n    input.value.input.value = ''\n  }\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nconst setCurrentValueToModelValue = () => {\n  if (data.currentValue !== props.modelValue) {\n    data.currentValue = props.modelValue\n  }\n}\nconst handleWheel = (e: WheelEvent) => {\n  if (document.activeElement === e.target) e.preventDefault()\n}\n\nwatch(\n  () => props.modelValue,\n  (value, oldValue) => {\n    const newValue = verifyValue(value, true)\n    if (data.userInput === null && newValue !== oldValue) {\n      data.currentValue = newValue\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.precision,\n  () => {\n    data.currentValue = verifyValue(props.modelValue)\n  }\n)\nonMounted(() => {\n  const { min, max, modelValue } = props\n  const innerInput = input.value?.input as HTMLInputElement\n  innerInput.setAttribute('role', 'spinbutton')\n  if (Number.isFinite(max)) {\n    innerInput.setAttribute('aria-valuemax', String(max))\n  } else {\n    innerInput.removeAttribute('aria-valuemax')\n  }\n  if (Number.isFinite(min)) {\n    innerInput.setAttribute('aria-valuemin', String(min))\n  } else {\n    innerInput.removeAttribute('aria-valuemin')\n  }\n  innerInput.setAttribute(\n    'aria-valuenow',\n    data.currentValue || data.currentValue === 0\n      ? String(data.currentValue)\n      : ''\n  )\n  innerInput.setAttribute('aria-disabled', String(inputNumberDisabled.value))\n  if (!isNumber(modelValue) && modelValue != null) {\n    let val: number | null = Number(modelValue)\n    if (Number.isNaN(val)) {\n      val = null\n    }\n    emit(UPDATE_MODEL_EVENT, val!)\n  }\n  innerInput.addEventListener('wheel', handleWheel, { passive: false })\n})\nonUpdated(() => {\n  const innerInput = input.value?.input\n  innerInput?.setAttribute('aria-valuenow', `${data.currentValue ?? ''}`)\n})\ndefineExpose({\n  /** @description get focus the input component */\n  focus,\n  /** @description remove focus the input component */\n  blur,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}