{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { defineComponent, computed, getCurrentInstance, ref, watch, nextTick, provide, createVNode, renderSlot } from 'vue';\nimport { omit } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport { tabsRootContextKey } from './constants.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useOrderedChildren } from '../../../hooks/use-ordered-children/index.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber, isUndefined } from '../../../utils/types.mjs';\nimport { getEventCode } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number]\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    default: \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  stretch: Boolean\n});\nconst isPaneName = value => isString(value) || isNumber(value);\nconst tabsEmits = {\n  [UPDATE_MODEL_EVENT]: name => isPaneName(name),\n  tabClick: (pane, ev) => ev instanceof Event,\n  tabChange: name => isPaneName(name),\n  edit: (paneName, action) => [\"remove\", \"add\"].includes(action),\n  tabRemove: name => isPaneName(name),\n  tabAdd: () => true\n};\nconst Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    var _a;\n    const ns = useNamespace(\"tabs\");\n    const isVertical = computed(() => [\"left\", \"right\"].includes(props.tabPosition));\n    const {\n      children: panes,\n      addChild: registerPane,\n      removeChild: unregisterPane,\n      ChildrenSorter: PanesSorter\n    } = useOrderedChildren(getCurrentInstance(), \"ElTabPane\");\n    const nav$ = ref();\n    const currentName = ref((_a = props.modelValue) != null ? _a : \"0\");\n    const setCurrentName = async (value, trigger = false) => {\n      var _a2, _b, _c, _d;\n      if (currentName.value === value || isUndefined(value)) return;\n      try {\n        let canLeave;\n        if (props.beforeLeave) {\n          const result = props.beforeLeave(value, currentName.value);\n          canLeave = result instanceof Promise ? await result : result;\n        } else {\n          canLeave = true;\n        }\n        if (canLeave !== false) {\n          const isFocusInsidePane = (_a2 = panes.value.find(item => item.paneName === currentName.value)) == null ? void 0 : _a2.isFocusInsidePane();\n          currentName.value = value;\n          if (trigger) {\n            emit(UPDATE_MODEL_EVENT, value);\n            emit(\"tabChange\", value);\n          }\n          (_c = (_b = nav$.value) == null ? void 0 : _b.removeFocus) == null ? void 0 : _c.call(_b);\n          if (isFocusInsidePane) {\n            (_d = nav$.value) == null ? void 0 : _d.focusActiveTab();\n          }\n        }\n      } catch (e) {}\n    };\n    const handleTabClick = (tab, tabName, event) => {\n      if (tab.props.disabled) return;\n      emit(\"tabClick\", tab, event);\n      setCurrentName(tabName, true);\n    };\n    const handleTabRemove = (pane, ev) => {\n      if (pane.props.disabled || isUndefined(pane.props.name)) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tabRemove\", pane.props.name);\n    };\n    const handleTabAdd = () => {\n      emit(\"edit\", void 0, \"add\");\n      emit(\"tabAdd\");\n    };\n    const handleKeydown = event => {\n      const code = getEventCode(event);\n      if ([EVENT_CODE.enter, EVENT_CODE.numpadEnter].includes(code)) handleTabAdd();\n    };\n    const swapChildren = vnode => {\n      const actualFirstChild = vnode.el.firstChild;\n      const firstChild = [\"bottom\", \"right\"].includes(props.tabPosition) ? vnode.children[0].el : vnode.children[1].el;\n      if (actualFirstChild !== firstChild) {\n        actualFirstChild.before(firstChild);\n      }\n    };\n    watch(() => props.modelValue, modelValue => setCurrentName(modelValue));\n    watch(currentName, async () => {\n      var _a2;\n      await nextTick();\n      (_a2 = nav$.value) == null ? void 0 : _a2.scrollToActiveTab();\n    });\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      registerPane,\n      unregisterPane,\n      nav$\n    });\n    expose({\n      currentName,\n      get tabNavRef() {\n        return omit(nav$.value, [\"scheduleRender\"]);\n      }\n    });\n    return () => {\n      const addSlot = slots[\"add-icon\"];\n      const newButton = props.editable || props.addable ? createVNode(\"div\", {\n        \"class\": [ns.e(\"new-tab\"), isVertical.value && ns.e(\"new-tab-vertical\")],\n        \"tabindex\": \"0\",\n        \"onClick\": handleTabAdd,\n        \"onKeydown\": handleKeydown\n      }, [addSlot ? renderSlot(slots, \"add-icon\") : createVNode(ElIcon, {\n        \"class\": ns.is(\"icon-plus\")\n      }, {\n        default: () => [createVNode(Plus, null, null)]\n      })]) : null;\n      const tabNav = () => createVNode(TabNav, {\n        \"ref\": nav$,\n        \"currentName\": currentName.value,\n        \"editable\": props.editable,\n        \"type\": props.type,\n        \"panes\": panes.value,\n        \"stretch\": props.stretch,\n        \"onTabClick\": handleTabClick,\n        \"onTabRemove\": handleTabRemove\n      }, null);\n      const header = createVNode(\"div\", {\n        \"class\": [ns.e(\"header\"), isVertical.value && ns.e(\"header-vertical\"), ns.is(props.tabPosition)]\n      }, [createVNode(PanesSorter, null, {\n        default: tabNav,\n        $stable: true\n      }), newButton]);\n      const panels = createVNode(\"div\", {\n        \"class\": ns.e(\"content\")\n      }, [renderSlot(slots, \"default\")]);\n      return createVNode(\"div\", {\n        \"class\": [ns.b(), ns.m(props.tabPosition), {\n          [ns.m(\"card\")]: props.type === \"card\",\n          [ns.m(\"border-card\")]: props.type === \"border-card\"\n        }],\n        \"onVnodeMounted\": swapChildren,\n        \"onVnodeUpdated\": swapChildren\n      }, [panels, header]);\n    };\n  }\n});\nvar Tabs$1 = Tabs;\nexport { Tabs$1 as default, tabsEmits, tabsProps };","map":{"version":3,"names":["tabsProps","buildProps","type","String","values","default","closable","Boolean","addable","modelValue","editable","tabPosition","beforeLeave","definePropType","Function","stretch","isPaneName","value","isString","isNumber","tabsEmits","UPDATE_MODEL_EVENT","name","tabChange","edit","paneName","action","includes","tabRemove","tabAdd","Tabs","defineComponent","props","emits","setup","emit","slots","expose","_a","ns","useNamespace","isVertical","computed","children","panes","addChild","registerPane","removeChild","unregisterPane","useOrderedChildren","getCurrentInstance","nav$","ref","currentName","setCurrentName","trigger","_a2","_b","_c","_d","canLeave","result","Promise","isFocusInsidePane","find","item","removeFocus","call","focusActiveTab","e","handleTabClick","tab","tabName","event","disabled","pane","isUndefined","ev","stopPropagation","handleKeydown","code","getEventCode","EVENT_CODE","enter","numpadEnter","swapChildren","vnode","actualFirstChild","el","firstChild","before","nextTick","scrollToActiveTab","provide","tabsRootContextKey","omit","addSlot","newButton","createVNode","handleTabAdd","renderSlot","ElIcon","Plus","tabNav","TabNav","handleTabRemove","is","PanesSorter","$stable","panels","b","m","header","Tabs$1"],"sources":["../../../../../../packages/components/tabs/src/tabs.tsx"],"sourcesContent":["import {\n  computed,\n  createVNode,\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  provide,\n  ref,\n  renderSlot,\n  watch,\n} from 'vue'\nimport { omit } from 'lodash-unified'\nimport {\n  buildProps,\n  definePropType,\n  getEventCode,\n  isNumber,\n  isString,\n  isUndefined,\n} from '@element-plus/utils'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { useNamespace, useOrderedChildren } from '@element-plus/hooks'\nimport { tabsRootContextKey } from './constants'\nimport TabNav from './tab-nav'\n\nimport type { ExtractPropTypes, VNode, __ExtractPublicPropTypes } from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabPaneName, TabsPaneContext } from './constants'\n\nexport const tabsProps = buildProps({\n  /**\n   * @description type of Tab\n   */\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  /**\n   * @description whether Tab is closable\n   */\n  closable: Boolean,\n  /**\n   * @description whether Tab is addable\n   */\n  addable: Boolean,\n  /**\n   * @description binding value, name of the selected tab\n   */\n  modelValue: {\n    type: [String, Number],\n  },\n  /**\n   * @description whether Tab is addable and closable\n   */\n  editable: Boolean,\n  /**\n   * @description position of tabs\n   */\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  /**\n   * @description hook function before switching tab. If `false` is returned or a `Promise` is returned and then is rejected, switching will be prevented\n   */\n  beforeLeave: {\n    type: definePropType<\n      (newName: TabPaneName, oldName: TabPaneName) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  /**\n   * @description whether width of tab automatically fits its container\n   */\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\nexport type TabsPropsPublic = __ExtractPublicPropTypes<typeof tabsProps>\n\nconst isPaneName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPaneName) => isPaneName(name),\n  tabClick: (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  tabChange: (name: TabPaneName) => isPaneName(name),\n  edit: (paneName: TabPaneName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  tabRemove: (name: TabPaneName) => isPaneName(name),\n  tabAdd: () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nexport type TabsPanes = Record<number, TabsPaneContext>\n\nconst Tabs = defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const ns = useNamespace('tabs')\n\n    const isVertical = computed(() =>\n      ['left', 'right'].includes(props.tabPosition)\n    )\n\n    const {\n      children: panes,\n      addChild: registerPane,\n      removeChild: unregisterPane,\n      ChildrenSorter: PanesSorter,\n    } = useOrderedChildren<TabsPaneContext>(getCurrentInstance()!, 'ElTabPane')\n\n    const nav$ = ref<TabNavInstance>()\n    const currentName = ref<TabPaneName>(props.modelValue ?? '0')\n\n    const setCurrentName = async (value?: TabPaneName, trigger = false) => {\n      // should do nothing.\n      if (currentName.value === value || isUndefined(value)) return\n\n      try {\n        let canLeave\n        if (props.beforeLeave) {\n          const result = props.beforeLeave(value, currentName.value)\n          canLeave = result instanceof Promise ? await result : result\n        } else {\n          canLeave = true\n        }\n\n        if (canLeave !== false) {\n          const isFocusInsidePane = panes.value\n            .find((item) => item.paneName === currentName.value)\n            ?.isFocusInsidePane()\n\n          currentName.value = value\n          if (trigger) {\n            emit(UPDATE_MODEL_EVENT, value)\n            emit('tabChange', value)\n          }\n\n          nav$.value?.removeFocus?.()\n          if (isFocusInsidePane) {\n            nav$.value?.focusActiveTab()\n          }\n        }\n      } catch {}\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPaneName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      emit('tabClick', tab, event)\n      setCurrentName(tabName, true)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled || isUndefined(pane.props.name)) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tabRemove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tabAdd')\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = getEventCode(event)\n      if ([EVENT_CODE.enter, EVENT_CODE.numpadEnter].includes(code))\n        handleTabAdd()\n    }\n\n    const swapChildren = (\n      vnode: VNode & {\n        el: HTMLDivElement\n        children: VNode<HTMLDivElement>[]\n      }\n    ) => {\n      const actualFirstChild = vnode.el.firstChild!\n      const firstChild = ['bottom', 'right'].includes(props.tabPosition)\n        ? vnode.children[0].el!\n        : vnode.children[1].el!\n\n      if (actualFirstChild !== firstChild) {\n        actualFirstChild.before(firstChild)\n      }\n    }\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      await nextTick()\n      nav$.value?.scrollToActiveTab()\n    })\n\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      registerPane,\n      unregisterPane,\n      nav$,\n    })\n\n    expose({\n      currentName,\n      get tabNavRef() {\n        return omit(nav$.value, ['scheduleRender'])\n      },\n    })\n\n    return () => {\n      const addSlot = slots['add-icon']\n      const newButton =\n        props.editable || props.addable ? (\n          <div\n            class={[\n              ns.e('new-tab'),\n              isVertical.value && ns.e('new-tab-vertical'),\n            ]}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={handleKeydown}\n          >\n            {addSlot ? (\n              renderSlot(slots, 'add-icon')\n            ) : (\n              <ElIcon class={ns.is('icon-plus')}>\n                <Plus />\n              </ElIcon>\n            )}\n          </div>\n        ) : null\n\n      const tabNav = () => (\n        <TabNav\n          ref={nav$}\n          currentName={currentName.value}\n          editable={props.editable}\n          type={props.type}\n          panes={panes.value}\n          stretch={props.stretch}\n          onTabClick={handleTabClick}\n          onTabRemove={handleTabRemove}\n        />\n      )\n\n      const header = (\n        <div\n          class={[\n            ns.e('header'),\n            isVertical.value && ns.e('header-vertical'),\n            ns.is(props.tabPosition),\n          ]}\n        >\n          {createVNode(PanesSorter, null, {\n            default: tabNav,\n            $stable: true,\n          })}\n          {newButton}\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n          // @ts-ignore\n          onVnodeMounted={swapChildren}\n          onVnodeUpdated={swapChildren}\n        >\n          {panels}\n          {header}\n        </div>\n      )\n    }\n  },\n})\n\nexport type TabsInstance = InstanceType<typeof Tabs> & {\n  currentName: TabPaneName\n  tabNavRef: TabNavInstance | undefined\n}\n\nexport default Tabs\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}