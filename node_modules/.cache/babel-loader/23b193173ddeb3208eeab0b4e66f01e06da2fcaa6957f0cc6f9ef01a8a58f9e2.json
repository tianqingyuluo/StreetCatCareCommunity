{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { getCurrentInstance, inject, ref, computed } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { buildProps, definePropType } from '../../utils/vue/props/runtime.mjs';\nimport { isFunction, isArray } from '@vue/shared';\nconst emptyValuesContextKey = Symbol(\"emptyValuesContextKey\");\nconst SCOPE = \"use-empty-values\";\nconst DEFAULT_EMPTY_VALUES = [\"\", void 0, null];\nconst DEFAULT_VALUE_ON_CLEAR = void 0;\nconst useEmptyValuesProps = buildProps({\n  emptyValues: Array,\n  valueOnClear: {\n    type: definePropType([String, Number, Boolean, Function]),\n    default: void 0,\n    validator: val => {\n      val = isFunction(val) ? val() : val;\n      if (isArray(val)) {\n        return val.every(item => !item);\n      }\n      return !val;\n    }\n  }\n});\nconst useEmptyValues = (props, defaultValue) => {\n  const config = getCurrentInstance() ? inject(emptyValuesContextKey, ref({})) : ref({});\n  const emptyValues = computed(() => props.emptyValues || config.value.emptyValues || DEFAULT_EMPTY_VALUES);\n  const valueOnClear = computed(() => {\n    if (isFunction(props.valueOnClear)) {\n      return props.valueOnClear();\n    } else if (props.valueOnClear !== void 0) {\n      return props.valueOnClear;\n    } else if (isFunction(config.value.valueOnClear)) {\n      return config.value.valueOnClear();\n    } else if (config.value.valueOnClear !== void 0) {\n      return config.value.valueOnClear;\n    }\n    return defaultValue !== void 0 ? defaultValue : DEFAULT_VALUE_ON_CLEAR;\n  });\n  const isEmptyValue = value => {\n    let result = true;\n    if (isArray(value)) {\n      result = emptyValues.value.some(emptyValue => {\n        return isEqual(value, emptyValue);\n      });\n    } else {\n      result = emptyValues.value.includes(value);\n    }\n    return result;\n  };\n  if (!isEmptyValue(valueOnClear.value)) ;\n  return {\n    emptyValues,\n    valueOnClear,\n    isEmptyValue\n  };\n};\nexport { DEFAULT_EMPTY_VALUES, DEFAULT_VALUE_ON_CLEAR, SCOPE, emptyValuesContextKey, useEmptyValues, useEmptyValuesProps };","map":{"version":3,"names":["emptyValuesContextKey","Symbol","SCOPE","DEFAULT_EMPTY_VALUES","DEFAULT_VALUE_ON_CLEAR","useEmptyValuesProps","buildProps","emptyValues","Array","valueOnClear","type","definePropType","String","Number","Boolean","Function","default","validator","val","isFunction","isArray","every","item","useEmptyValues","props","defaultValue","config","getCurrentInstance","inject","ref","computed","value","isEmptyValue","result","some","emptyValue","isEqual","includes"],"sources":["../../../../../packages/hooks/use-empty-values/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, ref } from 'vue'\nimport {\n  buildProps,\n  debugWarn,\n  definePropType,\n  isArray,\n  isFunction,\n} from '@element-plus/utils'\nimport { isEqual } from 'lodash-unified'\n\nimport type { ExtractPropTypes, InjectionKey, Ref } from 'vue'\n\ntype EmptyValuesContext = ExtractPropTypes<typeof useEmptyValuesProps>\n\nexport const emptyValuesContextKey: InjectionKey<Ref<EmptyValuesContext>> =\n  Symbol('emptyValuesContextKey')\nexport const SCOPE = 'use-empty-values'\nexport const DEFAULT_EMPTY_VALUES = ['', undefined, null]\nexport const DEFAULT_VALUE_ON_CLEAR = undefined\n\nexport const useEmptyValuesProps = buildProps({\n  /**\n   * @description empty values supported by the component\n   */\n  emptyValues: Array,\n  /**\n   * @description return value when cleared, if you want to set `undefined`, use `() => undefined`\n   */\n  valueOnClear: {\n    /* eslint-disable-next-line @typescript-eslint/no-unsafe-function-type */\n    type: definePropType<string | number | boolean | Function | null>([\n      String,\n      Number,\n      Boolean,\n      Function,\n    ]),\n    default: undefined,\n    validator: (val: unknown) => {\n      val = isFunction(val) ? val() : val\n      if (isArray(val)) {\n        return val.every((item) => !item)\n      }\n      return !val\n    },\n  },\n} as const)\n\nexport const useEmptyValues = (\n  props: EmptyValuesContext,\n  defaultValue?: null | undefined\n) => {\n  const config = getCurrentInstance()\n    ? inject(emptyValuesContextKey, ref<EmptyValuesContext>({}))\n    : ref<EmptyValuesContext>({})\n\n  const emptyValues = computed(\n    () => props.emptyValues || config.value.emptyValues || DEFAULT_EMPTY_VALUES\n  )\n\n  const valueOnClear = computed(() => {\n    // function is used for undefined cause undefined can't be a value of prop\n    if (isFunction(props.valueOnClear)) {\n      return props.valueOnClear()\n    } else if (props.valueOnClear !== undefined) {\n      return props.valueOnClear\n    } else if (isFunction(config.value.valueOnClear)) {\n      return config.value.valueOnClear()\n    } else if (config.value.valueOnClear !== undefined) {\n      return config.value.valueOnClear\n    }\n    return defaultValue !== undefined ? defaultValue : DEFAULT_VALUE_ON_CLEAR\n  })\n\n  const isEmptyValue = (value: unknown) => {\n    let result = true\n    if (isArray(value)) {\n      result = emptyValues.value.some((emptyValue) => {\n        return isEqual(value, emptyValue)\n      })\n    } else {\n      result = emptyValues.value.includes(value)\n    }\n    return result\n  }\n\n  if (!isEmptyValue(valueOnClear.value)) {\n    debugWarn(SCOPE, 'value-on-clear should be a value of empty-values')\n  }\n\n  return {\n    emptyValues,\n    valueOnClear,\n    isEmptyValue,\n  }\n}\n"],"mappings":";;;;;;;AASY,MAACA,qBAAqB,GAAGC,MAAM,CAAC,uBAAuB;AACvD,MAACC,KAAK,GAAG;AACT,MAACC,oBAAoB,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,IAAI;AACzC,MAACC,sBAAsB,GAAG,KAAK;AAC/B,MAACC,mBAAmB,GAAGC,UAAU,CAAC;EAC5CC,WAAW,EAAEC,KAAK;EAClBC,YAAY,EAAE;IACZC,IAAI,EAAEC,cAAc,CAAC,CACnBC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,QAAQ,CACT,CAAC;IACFC,OAAO,EAAE,KAAK,CAAC;IACfC,SAAS,EAAGC,GAAG,IAAK;MAClBA,GAAG,GAAGC,UAAU,CAACD,GAAG,CAAC,GAAGA,GAAG,EAAE,GAAGA,GAAG;MACnC,IAAIE,OAAO,CAACF,GAAG,CAAC,EAAE;QAChB,OAAOA,GAAG,CAACG,KAAK,CAAEC,IAAI,IAAK,CAACA,IAAI,CAAC;MACzC;MACM,OAAO,CAACJ,GAAG;IACjB;EACA;AACA,CAAC;AACW,MAACK,cAAc,GAAGA,CAACC,KAAK,EAAEC,YAAY,KAAK;EACrD,MAAMC,MAAM,GAAGC,kBAAkB,EAAE,GAAGC,MAAM,CAAC5B,qBAAqB,EAAE6B,GAAG,CAAC,EAAE,CAAC,CAAC,GAAGA,GAAG,CAAC,EAAE,CAAC;EACtF,MAAMtB,WAAW,GAAGuB,QAAQ,CAAC,MAAMN,KAAK,CAACjB,WAAW,IAAImB,MAAM,CAACK,KAAK,CAACxB,WAAW,IAAIJ,oBAAoB,CAAC;EACzG,MAAMM,YAAY,GAAGqB,QAAQ,CAAC,MAAM;IAClC,IAAIX,UAAU,CAACK,KAAK,CAACf,YAAY,CAAC,EAAE;MAClC,OAAOe,KAAK,CAACf,YAAY,EAAE;IACjC,CAAK,MAAM,IAAIe,KAAK,CAACf,YAAY,KAAK,KAAK,CAAC,EAAE;MACxC,OAAOe,KAAK,CAACf,YAAY;IAC/B,CAAK,MAAM,IAAIU,UAAU,CAACO,MAAM,CAACK,KAAK,CAACtB,YAAY,CAAC,EAAE;MAChD,OAAOiB,MAAM,CAACK,KAAK,CAACtB,YAAY,EAAE;IACxC,CAAK,MAAM,IAAIiB,MAAM,CAACK,KAAK,CAACtB,YAAY,KAAK,KAAK,CAAC,EAAE;MAC/C,OAAOiB,MAAM,CAACK,KAAK,CAACtB,YAAY;IACtC;IACI,OAAOgB,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAGrB,sBAAsB;EAC1E,CAAG,CAAC;EACF,MAAM4B,YAAY,GAAID,KAAK,IAAK;IAC9B,IAAIE,MAAM,GAAG,IAAI;IACjB,IAAIb,OAAO,CAACW,KAAK,CAAC,EAAE;MAClBE,MAAM,GAAG1B,WAAW,CAACwB,KAAK,CAACG,IAAI,CAAEC,UAAU,IAAK;QAC9C,OAAOC,OAAO,CAACL,KAAK,EAAEI,UAAU,CAAC;MACzC,CAAO,CAAC;IACR,CAAK,MAAM;MACLF,MAAM,GAAG1B,WAAW,CAACwB,KAAK,CAACM,QAAQ,CAACN,KAAK,CAAC;IAChD;IACI,OAAOE,MAAM;EACjB,CAAG;EACD,IAAI,CAACD,YAAY,CAACvB,YAAY,CAACsB,KAAK,CAAC,EAAE;EAGvC,OAAO;IACLxB,WAAW;IACXE,YAAY;IACZuB;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}