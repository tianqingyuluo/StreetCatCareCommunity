{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, provide, openBlock, createBlock, unref, withCtx, withDirectives, mergeProps, withKeys, createElementVNode, createVNode, normalizeClass, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { pick, debounce } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { reactiveComputed } from '@vueuse/core';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElButton } from '../../button/index.mjs';\nimport { ArrowDown, Close } from '@element-plus/icons-vue';\nimport { colorPickerProps, colorPickerEmits } from './color-picker.mjs';\nimport { ElColorPickerPanel } from '../../color-picker-panel/index.mjs';\nimport Color from '../../color-picker-panel/src/utils/color.mjs';\nimport { useCommonColor } from '../../color-picker-panel/src/composables/use-common-color.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { colorPickerPanelProps, ROOT_COMMON_COLOR_INJECTION_KEY } from '../../color-picker-panel/src/color-picker-panel.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize, useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useFocusController } from '../../../hooks/use-focus-controller/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { getEventCode } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst __default__ = defineComponent({\n  name: \"ElColorPicker\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: colorPickerProps,\n  emits: colorPickerEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const {\n      formItem\n    } = useFormItem();\n    const colorSize = useFormSize();\n    const colorDisabled = useFormDisabled();\n    const {\n      valueOnClear,\n      isEmptyValue\n    } = useEmptyValues(props, null);\n    const commonColor = useCommonColor(props, emit);\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const popper = ref();\n    const triggerRef = ref();\n    const pickerPanelRef = ref();\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    let shouldActiveChange = true;\n    const {\n      isFocused,\n      handleFocus,\n      handleBlur\n    } = useFocusController(triggerRef, {\n      disabled: colorDisabled,\n      beforeBlur(event) {\n        var _a;\n        return (_a = popper.value) == null ? void 0 : _a.isFocusInsideContent(event);\n      },\n      afterBlur() {\n        var _a;\n        setShowPicker(false);\n        resetColor();\n        if (props.validateEvent) {\n          (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn());\n        }\n      }\n    });\n    const color = reactiveComputed(() => {\n      var _a, _b;\n      return (_b = (_a = pickerPanelRef.value) == null ? void 0 : _a.color) != null ? _b : commonColor.color;\n    });\n    const panelProps = computed(() => pick(props, Object.keys(colorPickerPanelProps)));\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color, props.showAlpha);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.ariaLabel || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    const btnKls = computed(() => {\n      return [ns.b(\"picker\"), ns.is(\"disabled\", colorDisabled.value), ns.bm(\"picker\", colorSize.value), ns.is(\"focused\", isFocused.value)];\n    });\n    function displayedRgb(color2, showAlpha) {\n      const {\n        r,\n        g,\n        b,\n        a\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${a})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = debounce(setShowPicker, 100, {\n      leading: true\n    });\n    function show() {\n      if (colorDisabled.value) return;\n      setShowPicker(true);\n    }\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      if (showPicker.value) {\n        resetColor();\n      }\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function confirmValue() {\n      const value = isEmptyValue(color.value) ? valueOnClear.value : color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn());\n      }\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, valueOnClear.value);\n      emit(CHANGE_EVENT, valueOnClear.value);\n      if (props.modelValue !== valueOnClear.value && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn());\n      }\n      resetColor();\n    }\n    function handleClickOutside() {\n      if (!showPicker.value) return;\n      hide();\n      isFocused.value && focus();\n    }\n    function handleEsc(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      setShowPicker(false);\n      resetColor();\n    }\n    function handleKeyDown(event) {\n      var _a, _b;\n      const code = getEventCode(event);\n      switch (code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n        case EVENT_CODE.space:\n          event.preventDefault();\n          event.stopPropagation();\n          show();\n          (_b = (_a = pickerPanelRef == null ? void 0 : pickerPanelRef.value) == null ? void 0 : _a.inputRef) == null ? void 0 : _b.focus();\n          break;\n        case EVENT_CODE.esc:\n          handleEsc(event);\n          break;\n      }\n    }\n    function focus() {\n      triggerRef.value.focus();\n    }\n    function blur() {\n      triggerRef.value.blur();\n    }\n    watch(() => currentColor.value, val => {\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => showPicker.value, () => {\n      var _a;\n      nextTick((_a = pickerPanelRef.value) == null ? void 0 : _a.update);\n    });\n    provide(ROOT_COMMON_COLOR_INJECTION_KEY, commonColor);\n    expose({\n      color,\n      show,\n      hide,\n      focus,\n      blur\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [unref(ns).be(\"picker\", \"panel\"), _ctx.popperClass],\n        \"popper-style\": _ctx.popperStyle,\n        \"stop-popper-mouse-event\": false,\n        pure: \"\",\n        effect: \"light\",\n        trigger: \"click\",\n        teleported: _ctx.teleported,\n        transition: `${unref(ns).namespace.value}-zoom-in-top`,\n        persistent: _ctx.persistent,\n        \"append-to\": _ctx.appendTo,\n        onHide: $event => setShowPicker(false)\n      }, {\n        content: withCtx(() => [withDirectives((openBlock(), createBlock(unref(ElColorPickerPanel), mergeProps({\n          ref_key: \"pickerPanelRef\",\n          ref: pickerPanelRef\n        }, unref(panelProps), {\n          border: false,\n          onKeydown: withKeys(handleEsc, [\"esc\"])\n        }), {\n          footer: withCtx(() => [createElementVNode(\"div\", null, [createVNode(unref(ElButton), {\n            class: normalizeClass(unref(ns).be(\"footer\", \"link-btn\")),\n            text: \"\",\n            size: \"small\",\n            onClick: clear\n          }, {\n            default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.clear\")), 1)]),\n            _: 1\n          }, 8, [\"class\"]), createVNode(unref(ElButton), {\n            plain: \"\",\n            size: \"small\",\n            class: normalizeClass(unref(ns).be(\"footer\", \"btn\")),\n            onClick: confirmValue\n          }, {\n            default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.colorpicker.confirm\")), 1)]),\n            _: 1\n          }, 8, [\"class\"])])]),\n          _: 1\n        }, 16, [\"onKeydown\"])), [[unref(ClickOutside), handleClickOutside, triggerRef.value]])]),\n        default: withCtx(() => [createElementVNode(\"div\", mergeProps({\n          id: unref(buttonId),\n          ref_key: \"triggerRef\",\n          ref: triggerRef\n        }, _ctx.$attrs, {\n          class: unref(btnKls),\n          role: \"button\",\n          \"aria-label\": unref(buttonAriaLabel),\n          \"aria-labelledby\": unref(buttonAriaLabelledby),\n          \"aria-description\": unref(t)(\"el.colorpicker.description\", {\n            color: _ctx.modelValue || \"\"\n          }),\n          \"aria-disabled\": unref(colorDisabled),\n          tabindex: unref(colorDisabled) ? void 0 : _ctx.tabindex,\n          onKeydown: handleKeyDown,\n          onFocus: unref(handleFocus),\n          onBlur: unref(handleBlur)\n        }), [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"trigger\")),\n          onClick: handleTrigger\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).be(\"picker\", \"color\"), unref(ns).is(\"alpha\", _ctx.showAlpha)])\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).be(\"picker\", \"color-inner\")),\n          style: normalizeStyle({\n            backgroundColor: unref(displayedColor)\n          })\n        }, [withDirectives(createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).be(\"picker\", \"icon\"), unref(ns).is(\"icon-arrow-down\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"]), [[vShow, _ctx.modelValue || showPanelColor.value]]), withDirectives(createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).be(\"picker\", \"empty\"), unref(ns).is(\"icon-close\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(Close))]),\n          _: 1\n        }, 8, [\"class\"]), [[vShow, !_ctx.modelValue && !showPanelColor.value]])], 6)], 2)], 2)], 16, [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"aria-disabled\", \"tabindex\", \"onFocus\", \"onBlur\"])]),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"popper-style\", \"teleported\", \"transition\", \"persistent\", \"append-to\", \"onHide\"]);\n    };\n  }\n});\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"color-picker.vue\"]]);\nexport { ColorPicker as default };","map":{"version":3,"names":["name","t","useLocale","ns","useNamespace","formItem","useFormItem","colorSize","useFormSize","colorDisabled","useFormDisabled","valueOnClear","isEmptyValue","useEmptyValues","props","commonColor","useCommonColor","emit","inputId","buttonId","isLabeledByFormItem","useFormItemInputId","formItemContext","popper","ref","triggerRef","pickerPanelRef","showPicker","showPanelColor","shouldActiveChange","isFocused","handleFocus","handleBlur","useFocusController","disabled","beforeBlur","event","_a","value","isFocusInsideContent","afterBlur","setShowPicker","resetColor","validateEvent","validate","call","catch","err","debugWarn","color","reactiveComputed","_b","panelProps","computed","pick","Object","keys","colorPickerPanelProps","displayedColor","modelValue","displayedRgb","showAlpha","currentColor","buttonAriaLabel","ariaLabel","buttonAriaLabelledby","labelId","btnKls","b","is","bm","color2","r","g","a","toRgb","debounceSetShowPicker","debounce","leading","show","hide","nextTick","fromString","handleTrigger","confirmValue","UPDATE_MODEL_EVENT","CHANGE_EVENT","newColor","Color","enableAlpha","format","colorFormat","compare","clear","handleClickOutside","focus","handleEsc","preventDefault","stopPropagation","handleKeyDown","code","getEventCode","EVENT_CODE","enter","numpadEnter","space","inputRef","esc","blur","watch","val","newVal","update","provide","ROOT_COMMON_COLOR_INJECTION_KEY","expose","_ctx","_cache","openBlock","createBlock","unref","ElTooltip","ref_key","visible","offset","be","popperClass","popperStyle","pure","effect","trigger","teleported","transition","namespace","persistent","appendTo","onHide","$event"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), popperClass!]\"\n    :popper-style=\"popperStyle\"\n    :stop-popper-mouse-event=\"false\"\n    pure\n    effect=\"light\"\n    trigger=\"click\"\n    :teleported=\"teleported\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    :persistent=\"persistent\"\n    :append-to=\"appendTo\"\n    @hide=\"setShowPicker(false)\"\n  >\n    <template #content>\n      <el-color-picker-panel\n        ref=\"pickerPanelRef\"\n        v-bind=\"panelProps\"\n        v-click-outside:[triggerRef]=\"handleClickOutside\"\n        :border=\"false\"\n        @keydown.esc=\"handleEsc\"\n      >\n        <template #footer>\n          <div>\n            <el-button\n              :class=\"ns.be('footer', 'link-btn')\"\n              text\n              size=\"small\"\n              @click=\"clear\"\n            >\n              {{ t('el.colorpicker.clear') }}\n            </el-button>\n            <el-button\n              plain\n              size=\"small\"\n              :class=\"ns.be('footer', 'btn')\"\n              @click=\"confirmValue\"\n            >\n              {{ t('el.colorpicker.confirm') }}\n            </el-button>\n          </div>\n        </template>\n      </el-color-picker-panel>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        ref=\"triggerRef\"\n        v-bind=\"$attrs\"\n        :class=\"btnKls\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :aria-disabled=\"colorDisabled\"\n        :tabindex=\"colorDisabled ? undefined : tabindex\"\n        @keydown=\"handleKeyDown\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n      >\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-show=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, ref, watch } from 'vue'\nimport { debounce, pick } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { reactiveComputed } from '@vueuse/core'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElButton } from '@element-plus/components/button'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useFormSize,\n} from '@element-plus/components/form'\nimport {\n  useEmptyValues,\n  useFocusController,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { debugWarn, getEventCode } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport { colorPickerEmits, colorPickerProps } from './color-picker'\nimport {\n  ElColorPickerPanel,\n  ROOT_COMMON_COLOR_INJECTION_KEY,\n  colorPickerPanelProps,\n} from '@element-plus/components/color-picker-panel'\nimport Color from '@element-plus/components/color-picker-panel/src/utils/color'\nimport { useCommonColor } from '@element-plus/components/color-picker-panel/src/composables/use-common-color'\n\nimport type { ColorPickerPanelInstance } from '@element-plus/components/color-picker-panel'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\n\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useFormSize()\nconst colorDisabled = useFormDisabled()\nconst { valueOnClear, isEmptyValue } = useEmptyValues(props, null)\nconst commonColor = useCommonColor(props, emit)\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst popper = ref<TooltipInstance>()\nconst triggerRef = ref()\nconst pickerPanelRef = ref<ColorPickerPanelInstance>()\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst { isFocused, handleFocus, handleBlur } = useFocusController(triggerRef, {\n  disabled: colorDisabled,\n  beforeBlur(event) {\n    return popper.value?.isFocusInsideContent(event)\n  },\n  afterBlur() {\n    setShowPicker(false)\n    resetColor()\n    if (props.validateEvent) {\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst color = reactiveComputed(\n  () => pickerPanelRef.value?.color ?? commonColor.color\n) as Color\n\nconst panelProps = computed(() =>\n  pick(props, Object.keys(colorPickerPanelProps))\n)\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.ariaLabel || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nconst btnKls = computed(() => {\n  return [\n    ns.b('picker'),\n    ns.is('disabled', colorDisabled.value),\n    ns.bm('picker', colorSize.value),\n    ns.is('focused', isFocused.value),\n  ]\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  const { r, g, b, a } = color.toRgb()\n  return showAlpha ? `rgba(${r}, ${g}, ${b}, ${a})` : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100, { leading: true })\nfunction show() {\n  if (colorDisabled.value) return\n  setShowPicker(true)\n}\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  if (showPicker.value) {\n    resetColor()\n  }\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction confirmValue() {\n  const value = isEmptyValue(color.value) ? valueOnClear.value : color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(CHANGE_EVENT, value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, valueOnClear.value)\n  emit(CHANGE_EVENT, valueOnClear.value)\n  if (props.modelValue !== valueOnClear.value && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nfunction handleClickOutside() {\n  if (!showPicker.value) return\n  hide()\n  isFocused.value && focus()\n}\n\nfunction handleEsc(event: KeyboardEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n  setShowPicker(false)\n  resetColor()\n}\n\nfunction handleKeyDown(event: KeyboardEvent) {\n  const code = getEventCode(event)\n\n  switch (code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n    case EVENT_CODE.space:\n      event.preventDefault()\n      event.stopPropagation()\n      show()\n      pickerPanelRef?.value?.inputRef?.focus()\n      break\n    case EVENT_CODE.esc:\n      handleEsc(event)\n      break\n  }\n}\n\nfunction focus() {\n  triggerRef.value.focus()\n}\n\nfunction blur() {\n  triggerRef.value.blur()\n}\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(pickerPanelRef.value?.update)\n  }\n)\n\nprovide(ROOT_COMMON_COLOR_INJECTION_KEY, commonColor)\n\ndefineExpose({\n  /**\n   * @description current color object\n   */\n  color,\n  /**\n   * @description manually show ColorPicker\n   */\n  show,\n  /**\n   * @description manually hide ColorPicker\n   */\n  hide,\n  /**\n   * @description focus the input element\n   */\n  focus,\n  /**\n   * @description blur the input element\n   */\n  blur,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;mCAuIc;EACZA,IAAM;AACR;;;;;;;;;;IAKM;MAAEC;IAAE,IAAIC,SAAU;IAClB,MAAAC,EAAA,GAAKC,YAAA,CAAa,OAAO;IACzB;MAAEC;IAAS,IAAIC,WAAY;IACjC,MAAMC,SAAA,GAAYC,WAAY;IAC9B,MAAMC,aAAA,GAAgBC,eAAgB;IACtC,MAAM;MAAEC,YAAc;MAAAC;IAAA,CAAiB,GAAAC,cAAA,CAAeC,KAAA,EAAO,IAAI;IAC3D,MAAAC,WAAA,GAAcC,cAAe,CAAAF,KAAA,EAAOG,IAAI;IAC9C,MAAM;MAAEC,OAAS,EAAAC,QAAA;MAAUC;IAAoB,IAAIC,kBAAA,CAAmBP,KAAO;MAC3EQ,eAAiB,EAAAjB;IAAA,CAClB;IAED,MAAMkB,MAAA,GAASC,GAAqB;IACpC,MAAMC,UAAA,GAAaD,GAAI;IACvB,MAAME,cAAA,GAAiBF,GAA8B;IAC/C,MAAAG,UAAA,GAAaH,GAAA,CAAI,KAAK;IACtB,MAAAI,cAAA,GAAiBJ,GAAA,CAAI,KAAK;IAGhC,IAAIK,kBAAqB;IAEzB,MAAM;MAAEC,SAAW;MAAAC,WAAA;MAAaC;IAAW,IAAIC,kBAAA,CAAmBR,UAAY;MAC5ES,QAAU,EAAAzB,aAAA;MACV0B,WAAWC,KAAO;QACT,IAAAC,EAAA;QACT,QAAAA,EAAA,GAAAd,MAAA,CAAAe,KAAA,qBAAAD,EAAA,CAAAE,oBAAA,CAAAH,KAAA;MAAA,CACY;MACVI,UAAA;QACW,IAAAH,EAAA;QACXI,aAAyB;QACbC,UAAA;QACZ,IAAA5B,KAAA,CAAA6B,aAAA;UACF,CAAAN,EAAA,GAAAhC,QAAA,oBAAAA,QAAA,CAAAuC,QAAA,qBAAAP,EAAA,CAAAQ,IAAA,CAAAxC,QAAA,UAAAyC,KAAA,CAAAC,GAAA,IAAAC,SAAA;QAAA;MAGF;IAAc,EACZ;IACF,MAAAC,KAAA,GAAAC,gBAAA;MAEA,IAAMb,EAAa,EAAAc,EAAA;MAAS,OACrB,CAAAA,EAAA,IAAAd,EAAA,GAAcX,cAAA,CAAAY,KAAA,YAA0B,KAAC,IAAAD,EAAA,CAAAY,KAAA,YAAAE,EAAA,GAAApC,WAAA,CAAAkC,KAAA;IAAA,CAChD;IAEM,MAAAG,UAAA,GAAAC,QAAA,OAAgCC,IAAA,CAAAxC,KAAA,EAAAyC,MAAA,CAAAC,IAAA,CAAAC,qBAAA;IACpC,MAAIC,cAAqB,GAAAL,QAAA;MAChB,KAAAvC,KAAA,CAAA6C,UAAA,KAAA/B,cAAA,CAAAU,KAAA;QACT;MACA;MACD,OAAAsB,YAAA,CAAAX,KAAA,EAAAnC,KAAA,CAAA+C,SAAA;IAED,CAAM;IACJ,MAAAC,YAAc,GAAAT,QAAA,CAAc,MAAgB;MAC7C,QAAAvC,KAAA,CAAA6C,UAAA,KAAA/B,cAAA,CAAAU,KAAA,QAAAW,KAAA,CAAAX,KAAA;IAED,CAAM;IACJ,MAAAyB,eAA4B,GAAAV,QAAA;MAG7B,QAAAjC,mBAAA,CAAAkB,KAAA,GAAAxB,KAAA,CAAAkD,SAAA,IAAA/D,CAAA;IAED,CAAM;IACG,MAAAgE,oBAAA,GAAoBZ,QAAQ;MACpC,OAAAjC,mBAAA,CAAAkB,KAAA,GAAAjC,QAAA,oBAAAA,QAAA,CAAA6D,OAAA;IAED,CAAM;IACG,MAAAC,MAAA,GAAAd,QAAA;MACL,OAAK,CACLlD,EAAG,CAAAiE,CAAA,SAAe,GAClBjE,EAAG,CAAAkE,EAAA,CAAG,UAAU,EAAA5D,aAAe,CAAA6B,KAAA,GAC/BnC,EAAG,CAAAmE,EAAA,CAAG,QAAW,EAAA/D,SAAA,CAAA+B,KAAe,GAClCnC,EAAA,CAAAkE,EAAA,YAAAvC,SAAA,CAAAQ,KAAA,EACD;IAED,CAAS;IACP,SAAAsB,YAAmBA,CAAAW,MAAA,EAAAV,SAAgB;MACnC;QAAmBW,CAAA;QAAAC,CAAA;QAAAL,CAAA;QAAAM;MAAA,IAAAH,MAAS,CAAAI,KAAW;MACzC,OAAAd,SAAA,WAAAW,CAAA,KAAAC,CAAA,KAAAL,CAAA,KAAAM,CAAA,aAAAF,CAAA,KAAAC,CAAA,KAAAL,CAAA;IAEA;IACE,SAAA3B,aAAmBA,CAAAH,KAAA;MACrBX,UAAA,CAAAW,KAAA,GAAAA,KAAA;IAEA;IACA,MAAAsC,qBAAgB,GAAAC,QAAA,CAAApC,aAAA;MAAAqC,OAAA;IAAA;IACd,SAAAC,KAAA;MACA,IAAAtE,aAAkB,CAAA6B,KAAA,EACpB;MAEAG,aAAgB;IACd;IACW,SAAAuC,KAAA;MACbJ,qBAAA;MAEAlC,UAAsB;IACpB;IACE,SAAAA,UAAsBA,CAAA;MACduC,QAAA;QACR,IAAOnE,KAAA,CAAA6C,UAAA;UACLV,KAAA,CAAMiC,UAAQ,CAAApE,KAAA,CAAA6C,UAAA;QACd;UACEV,KAAA,CAAAX,KAAA;UACF2C,QAAC;YACHrD,cAAA,CAAAU,KAAA;UAAA,CACD;QAAA;MAGH;IACE;IACA,SAAA6C,aAAsBA,CAAA;MACT,IAAA1E,aAAA,CAAA6B,KAAA,EACb;MACsB,IAAAX,UAAA,CAAAW,KAAA;QACxBI,UAAA;MAEA;MACEkC,qBAA2B,EAAAjD,UAAM,CAAAW,KAAS;IAC1C;IACA,SAAA8C,YAAmBA,CAAA,EAAK;MACxB,MAAA9C,KAAyB,GAAA1B,YAAA,CAAAqC,KAAA,CAAAX,KAAA,IAAA3B,YAAA,CAAA2B,KAAA,GAAAW,KAAA,CAAAX,KAAA;MACbrB,IAAA,CAAAoE,kBAAA,EAAA/C,KAAmB;MAC/BrB,IAAA,CAAAqE,YAAA,EAAAhD,KAAA;MACA,IAAAxB,KAAA,CAAA6B,aAA2B;QAE3BtC,QAAe,oBAAAA,QAAA,CAAAuC,QAAA,WAAAE,KAAA,CAAAC,GAAA,IAAAC,SAAA;MACb;MAA2B4B,qBACN;MACnBK,QAAA;QAA6B,MAAAM,QAChB,OAAAC,KAAA;UACdC,WAAA,EAAA3E,KAAA,CAAA+C,SAAA;UACD6B,MAAK,EAAA5E,KAAc,CAAA6E,WAAQ,IAAG;UACjBrD,KAAA,EAAAxB,KAAA,CAAA6C;QAAA,CACb;QACD,KAAAV,KAAA,CAAA2C,OAAA,CAAAL,QAAA;UACH7C,UAAA;QAEA;MACE;IACA;IACK,SAAAmD,MAAA;MACLjB,qBAAU,MAA4B;MAC1B3D,IAAA,CAAAoE,kBAAA,EAAA1E,YAAyB,CAAC2B,KAAQ;MAC9CrB,IAAA,CAAAqE,YAAA,EAAA3E,YAAA,CAAA2B,KAAA;MACW,IAAAxB,KAAA,CAAA6C,UAAA,KAAAhD,YAAA,CAAA2B,KAAA,IAAAxB,KAAA,CAAA6B,aAAA;QACbtC,QAAA,oBAAAA,QAAA,CAAAuC,QAAA,WAAAE,KAAA,CAAAC,GAAA,IAAAC,SAAA;MAEA;MACMN,UAAA;IACJ;IACA,SAAAoD,kBAAyBA,CAAA;MAC3B,KAAAnE,UAAA,CAAAW,KAAA,EAEA;MACE0C,IAAA,EAAM;MACNlD,SAAsB,CAAAQ,KAAA,IAAAyD,KAAA;IACtB;IACW,SAAAC,UAAA5D,KAAA;MACbA,KAAA,CAAA6D,cAAA;MAEA7D,KAAA,CAAA8D,eAAuB,EAAsB;MACrCzD,aAAO;MAEbC,UAAc;IAAA;IACI,SACXyD,aAAWA,CAAA/D,KAAA;MAAA,IAAAC,EAAA,EACAc,EAAA;MACd,MAAAiD,IAAM,GAAeC,YAAA,CAAAjE,KAAA;MACrB,QAAAgE,IAAsB;QACjB,KAAAE,UAAA,CAAAC,KAAA;QACW,KAAAD,UAAA,CAAAE,WAAA;QAChB,KAAAF,UAAA,CAAAG,KAAA;UAAArE,KACc,CAAA6D,cAAA;UACd7D,KAAA,CAAA8D,eAAe;UACfnB,IAAA;UACJ,CAAA5B,EAAA,IAAAd,EAAA,GAAAX,cAAA,oBAAAA,cAAA,CAAAY,KAAA,qBAAAD,EAAA,CAAAqE,QAAA,qBAAAvD,EAAA,CAAA4C,KAAA;UACF;QAEA,KAASO,UAAQ,CAAAK,GAAA;UACfX,SAAA,CAAA5D,KAAuB;UACzB;MAEA;IACE;IACF,SAAA2D,MAAA;MAEAtE,UAAA,CAAAa,KAAA,CAAAyD,KAAA;IAAA;IACqB,SACVa,KAAA;MACenF,UAAA,CAAAa,KAAA,CAAAsE,IAAA;IACtB;IACFC,KAAA,OAAA/C,YAAA,CAAAxB,KAAA,EAAAwE,GAAA;MACFjF,kBAAA,IAAAZ,IAAA,iBAAA6F,GAAA;MAEAjF,kBAAA;IAAA,EACE;IAAYgF,KACN,OAAA5D,KAAA,CAAAX,KAAA;MACJ,KAAAxB,KAAK,CAAA6C,UAAoB,KAAA/B,cAAA,CAAAU,KAAuB;QAC9CV,cAAA,CAAAU,KAAuB;MAAA;IACzB,CACF;IACFuE,KAAA,OAAA/F,KAAA,CAAA6C,UAAA,EAAAoD,MAAA;MAEA,KAAAA,MAAA;QAAAnF,cACc,CAAAU,KAAA;MAAA,CACX,MAAW,IAAAyE,MAAA,IAAAA,MAAA,KAAA9D,KAAA,CAAAX,KAAA;QACVT,kBAAa;QACXoB,KAAA,CAAAiC,UAAA,CAAe6B,MAAQ;MAAA;IAEvB,CAAqB;IACrBF,KAAA,OAAMlF,UAAA,CAAWW,KAAM;MACzB,IAAAD,EAAA;MACF4C,QAAA,EAAA5C,EAAA,GAAAX,cAAA,CAAAY,KAAA,qBAAAD,EAAA,CAAA2E,MAAA;IAAA,CACF;IAEAC,OAAA,CAAAC,+BAAA,EAAAnG,WAAA;IAAAoG,MAAA;MAEElE,KAAM;MACK8B,IAAA;MACXC,IAAA;MACFe,KAAA;MAEAa;IAEA,CAAa;IAAA,QAAAQ,IAAA,EAAAC,MAAA;MAAA,OAAAC,SAAA,IAAAC,WAAA,CAAAC,KAAA,CAAAC,SAAA;QAAAC,OAAA;QAIXlG,GAAA,EAAAD,MAAA;QAAAoG,OAAA,EAAAhG,UAAA,CAAAW,KAAA;QAAA;QAAA;QAIAsF,MAAA;QAAA;QAAA,iBAAAJ,KAAA,CAAArH,EAAA,EAAA0H,EAAA,qBAAAT,IAAA,CAAAU,WAAA;QAAA,gBAAAV,IAAA,CAAAW,WAAA;QAIA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAIAC,UAAA,EAAAf,IAAA,CAAAe,UAAA;QAAAC,UAAA,KAAAZ,KAAA,CAAArH,EAAA,EAAAkI,SAAA,CAAA/F,KAAA;QAAAgG,UAAA,EAAAlB,IAAA,CAAAkB,UAAA;QAAA,aAAAlB,IAAA,CAAAmB,QAAA;QAIAC,MAAA,EAAAC,MAAA,IAAAhG,aAAA;MAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}