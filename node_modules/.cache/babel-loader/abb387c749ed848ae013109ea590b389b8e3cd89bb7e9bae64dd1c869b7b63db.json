{"ast":null,"code":"import { defineComponent, ref, inject, onMounted, nextTick, watch, provide, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, createBlock, createCommentVNode, renderSlot } from 'vue';\nimport { ElInput } from '../../input/index.mjs';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport { colorPickerPanelProps, colorPickerPanelEmits, ROOT_COMMON_COLOR_INJECTION_KEY, colorPickerPanelContextKey } from './color-picker-panel.mjs';\nimport { useCommonColor } from './composables/use-common-color.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormDisabled } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst __default__ = defineComponent({\n  name: \"ElColorPickerPanel\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: colorPickerPanelProps,\n  emits: colorPickerPanelEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"color-picker-panel\");\n    const disabled = useFormDisabled();\n    const hueRef = ref();\n    const svRef = ref();\n    const alphaRef = ref();\n    const inputRef = ref();\n    const customInput = ref(\"\");\n    const {\n      color\n    } = inject(ROOT_COMMON_COLOR_INJECTION_KEY, () => useCommonColor(props, emit), true);\n    function handleConfirm() {\n      color.fromString(customInput.value);\n      if (color.value !== customInput.value) {\n        customInput.value = color.value;\n      }\n    }\n    function update() {\n      var _a, _b, _c;\n      (_a = hueRef.value) == null ? void 0 : _a.update();\n      (_b = svRef.value) == null ? void 0 : _b.update();\n      (_c = alphaRef.value) == null ? void 0 : _c.update();\n    }\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = color.value;\n      }\n      nextTick(update);\n    });\n    watch(() => props.modelValue, newVal => {\n      if (newVal !== color.value) {\n        newVal ? color.fromString(newVal) : color.clear();\n      }\n    });\n    watch(() => color.value, val => {\n      emit(UPDATE_MODEL_EVENT, val);\n      customInput.value = val;\n    });\n    provide(colorPickerPanelContextKey, {\n      currentColor: computed(() => color.value)\n    });\n    expose({\n      color,\n      inputRef,\n      update\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).is(\"disabled\", unref(disabled)), unref(ns).is(\"border\", _ctx.border)])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"wrapper\"))\n      }, [createVNode(HueSlider, {\n        ref_key: \"hueRef\",\n        ref: hueRef,\n        class: \"hue-slider\",\n        color: unref(color),\n        vertical: \"\",\n        disabled: unref(disabled)\n      }, null, 8, [\"color\", \"disabled\"]), createVNode(SvPanel, {\n        ref_key: \"svRef\",\n        ref: svRef,\n        color: unref(color),\n        disabled: unref(disabled)\n      }, null, 8, [\"color\", \"disabled\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(AlphaSlider, {\n        key: 0,\n        ref_key: \"alphaRef\",\n        ref: alphaRef,\n        color: unref(color),\n        disabled: unref(disabled)\n      }, null, 8, [\"color\", \"disabled\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(Predefine, {\n        key: 1,\n        ref: \"predefine\",\n        \"enable-alpha\": _ctx.showAlpha,\n        color: unref(color),\n        colors: _ctx.predefine,\n        disabled: unref(disabled)\n      }, null, 8, [\"enable-alpha\", \"color\", \"colors\", \"disabled\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"footer\"))\n      }, [createVNode(unref(ElInput), {\n        ref_key: \"inputRef\",\n        ref: inputRef,\n        modelValue: customInput.value,\n        \"onUpdate:modelValue\": $event => customInput.value = $event,\n        \"validate-event\": false,\n        size: \"small\",\n        disabled: unref(disabled),\n        onChange: handleConfirm\n      }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"disabled\"]), renderSlot(_ctx.$slots, \"footer\")], 2)], 2);\n    };\n  }\n});\nvar ColorPickerPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"color-picker-panel.vue\"]]);\nexport { ColorPickerPanel as default };","map":{"version":3,"names":["name","ns","useNamespace","disabled","useFormDisabled","hueRef","ref","svRef","alphaRef","inputRef","customInput","color","inject","ROOT_COMMON_COLOR_INJECTION_KEY","useCommonColor","props","emit","handleConfirm","fromString","value","update","_a","_b","_c","onMounted","modelValue","nextTick","watch","newVal","clear","val","UPDATE_MODEL_EVENT","provide","colorPickerPanelContextKey","currentColor","computed","expose","_ctx","_cache","openBlock","createElementBlock","class","normalizeClass","unref","b","is","border","createElementVNode","e","createVNode","HueSlider","ref_key","vertical","SvPanel"],"sources":["../../../../../../packages/components/color-picker-panel/src/color-picker-panel.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled), ns.is('border', border)]\">\n    <div :class=\"ns.e('wrapper')\">\n      <hue-slider\n        ref=\"hueRef\"\n        class=\"hue-slider\"\n        :color=\"color\"\n        vertical\n        :disabled=\"disabled\"\n      />\n      <sv-panel ref=\"svRef\" :color=\"color\" :disabled=\"disabled\" />\n    </div>\n    <alpha-slider\n      v-if=\"showAlpha\"\n      ref=\"alphaRef\"\n      :color=\"color\"\n      :disabled=\"disabled\"\n    />\n    <predefine\n      v-if=\"predefine\"\n      ref=\"predefine\"\n      :enable-alpha=\"showAlpha\"\n      :color=\"color\"\n      :colors=\"predefine\"\n      :disabled=\"disabled\"\n    />\n    <div :class=\"ns.e('footer')\">\n      <el-input\n        ref=\"inputRef\"\n        v-model=\"customInput\"\n        :validate-event=\"false\"\n        size=\"small\"\n        :disabled=\"disabled\"\n        @change=\"handleConfirm\"\n      />\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, nextTick, onMounted, provide, ref, watch } from 'vue'\nimport { ElInput } from '@element-plus/components/input'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { useNamespace } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport {\n  ROOT_COMMON_COLOR_INJECTION_KEY,\n  colorPickerPanelContextKey,\n  colorPickerPanelEmits,\n  colorPickerPanelProps,\n} from './color-picker-panel'\nimport { useCommonColor } from './composables/use-common-color'\n\nimport type { InputInstance } from '@element-plus/components/input'\n\ndefineOptions({\n  name: 'ElColorPickerPanel',\n})\nconst props = defineProps(colorPickerPanelProps)\nconst emit = defineEmits(colorPickerPanelEmits)\n\nconst ns = useNamespace('color-picker-panel')\nconst disabled = useFormDisabled()\nconst hueRef = ref<InstanceType<typeof HueSlider>>()\nconst svRef = ref<InstanceType<typeof SvPanel>>()\nconst alphaRef = ref<InstanceType<typeof AlphaSlider>>()\nconst inputRef = ref<InputInstance>()\nconst customInput = ref('')\n\nconst { color } = inject(\n  ROOT_COMMON_COLOR_INJECTION_KEY,\n  () => useCommonColor(props, emit),\n  true\n)\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n  if (color.value !== customInput.value) {\n    customInput.value = color.value\n  }\n}\n\nfunction update() {\n  hueRef.value?.update()\n  svRef.value?.update()\n  alphaRef.value?.update()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = color.value\n  }\n  nextTick(update)\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (newVal !== color.value) {\n      newVal ? color.fromString(newVal) : color.clear()\n    }\n  }\n)\n\nwatch(\n  () => color.value,\n  (val) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    customInput.value = val\n  }\n)\n\nprovide(colorPickerPanelContextKey, {\n  currentColor: computed(() => color.value),\n})\n\ndefineExpose({\n  /**\n   * @description current color object\n   */\n  color,\n  /**\n   * @description custom input ref\n   */\n  inputRef,\n  /**\n   * @description update sub components\n   */\n  update,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;mCA4Dc;EACZA,IAAM;AACR;;;;;;;;;;IAIM,MAAAC,EAAA,GAAKC,YAAA,CAAa,oBAAoB;IAC5C,MAAMC,QAAA,GAAWC,eAAgB;IACjC,MAAMC,MAAA,GAASC,GAAoC;IACnD,MAAMC,KAAA,GAAQD,GAAkC;IAChD,MAAME,QAAA,GAAWF,GAAsC;IACvD,MAAMG,QAAA,GAAWH,GAAmB;IAC9B,MAAAI,WAAA,GAAcJ,GAAA,CAAI,EAAE;IAEpB;MAAEK;IAAA,CAAU,GAAAC,MAAA,CAAAC,+BAAA,QAAAC,cAAA,CAAAC,KAAA,EAAAC,IAAA;IAChB,SAAAC,cAAA;MACAN,KAAA,CAAMO,UAAe,CAAAR,WAAO,CAAIS,KAAA;MAChC,IAAAR,KAAA,CAAAQ,KAAA,KAAAT,WAAA,CAAAS,KAAA;QACFT,WAAA,CAAAS,KAAA,GAAAR,KAAA,CAAAQ,KAAA;MAEA;IACE;IACI,SAAAC,MAAgBA,CAAA;MAClB,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAY;MACd,CAAAF,EAAA,GAAAhB,MAAA,CAAAc,KAAA,qBAAAE,EAAA,CAAAD,MAAA;MACF,CAAAE,EAAA,GAAAf,KAAA,CAAAY,KAAA,qBAAAG,EAAA,CAAAF,MAAA;MAEA,CAAAG,EAAA,GAAAf,QAAkB,CAAAW,KAAA,qBAAAI,EAAA,CAAAH,MAAA;IAChB;IACAI,SAAA,OAAoB;MACpB,IAAAT,KAAS,CAAAU,UAAc;QACzBf,WAAA,CAAAS,KAAA,GAAAR,KAAA,CAAAQ,KAAA;MAEA;MACEO,QAAA,CAAAN,MAAsB;IACpB;IACFO,KAAA,OAAAZ,KAAA,CAAAU,UAAA,EAAAG,MAAA;MACA,IAAAA,MAAe,KAAAjB,KAAA,CAAAQ,KAAA;QAChBS,MAAA,GAAAjB,KAAA,CAAAO,UAAA,CAAAU,MAAA,IAAAjB,KAAA,CAAAkB,KAAA;MAED;IAAA,EACE;IAAYF,KACA,OAAAhB,KAAA,CAAAQ,KAAA,EAAAW,GAAA;MACNd,IAAA,CAAAe,kBAAiB,EAAOD,GAAA;MAC1BpB,WAAA,CAAAS,KAAe,GAAAW,GAAA;IAAiC,CAClD;IACFE,OAAA,CAAAC,0BAAA;MACFC,YAAA,EAAAC,QAAA,OAAAxB,KAAA,CAAAQ,KAAA;IAEA;IAAAiB,MAAA;MAEEzB,KAAS;MACPF,QAAA;MACAW;IAAoB,CACtB;IACF,QAAAiB,IAAA,EAAAC,MAAA;MAEA,OAAoCC,SAAA,IAAAC,kBAAA;QACpBC,KAAA,EAAAC,cAAe,EAAAC,KAAA,CAAA1C,EAAM,CAAK,CAAA2C,CAAA,IAAAD,KAAA,CAAA1C,EAAA,EAAA4C,EAAA,aAAAF,KAAA,CAAAxC,QAAA,IAAAwC,KAAA,CAAA1C,EAAA,EAAA4C,EAAA,WAAAR,IAAA,CAAAS,MAAA;MAAA,CACzC,GAEYC,kBAAA;QAAAN,KAAA,EAAAC,cAAA,CAAAC,KAAA,CAAA1C,EAAA,EAAA+C,CAAA;MAAA,IAAAC,WAAA,CAAAC,SAAA;QAIXC,OAAA;QAAA7C,GAAA,EAAAD,MAAA;QAAAoC,KAAA;QAAA9B,KAAA,EAAAgC,KAAA,CAAAhC,KAAA;QAIAyC,QAAA;QAAAjD,QAAA,EAAAwC,KAAA,CAAAxC,QAAA;MAAA,oCAAA8C,WAAA,CAAAI,OAAA;QAIAF,OAAA;QACD7C,GAAA,EAAAC,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}